#!/bin/bash

. log
. functions
. parser
. parserv2
. cmd_table
. cmd_create
. cmd_set
. cmd_show
. cmd_reset
. cmd_truncate
. cmd_drop_table

execute() {
	# Clear this "object" (I know, variable, OK)
	unset SQLOBJ
	declare -A SQLOBJ

	# [ parser ]
	# Aqui preenchemos o objeto SQLOBJ
	#parser "${INPUT_CMD}"
	parse_sql "${INPUT_CMD}" > /dev/null
	RET="$?"

	if [ ! "$RET" == "0" ]; then
		LOGGER_MSG="There is a error in the SQL: ${ERROR[msg]}"
		eval $LOGGER ERROR

		return $RET
	fi

	# Buscar c√≥digo dos objetos
	#post_parser

	CMD="${TOKENS[CMD]}"
	if [[ "$CMD" == "DROP" ||
		  "$CMD" == "CREATE" ]]; then
		CMD="${CMD}_${TOKENS[OBJECT]}"
	fi

	LOGGER_MSG="Command |$CMD|"
	eval $LOGGER DEBUG1

	# The name of the function is standardized
	local fnc_call="${CMD,,}_execute"

	fn_exist $fnc_call
	RES=$?

	if [ ! "$RES" == "0" ]; then
		LOGGER_MSG="Unknown command: ${CMD}"
		eval $LOGGER ERROR
		return 1
	fi

	# Save the init datetime
	local TIME_INIT=$(${PRG_DATE} +%s%3N)

	eval $fnc_call	

	# Save the finish datetime
	local TIME_FINAL=$(${PRG_DATE} +%s%3N)

	# Check if need to show
	if [ "${GC[TIMING]}" == "true" ]; then
		local TIME_TOTAL=$(expr $TIME_FINAL - $TIME_INIT)
		writeln "Elapsed Time: $TIME_TOTAL ms"
	fi
}
