#!/bin/bash

# $1 - Object
# $2 - Fields
# $3 - Header
printer_init() {
	declare -n LPD=$1
	LPD[rows]=0
	LPD[header]="$3"
	LPD[fields]=$2
}

printer_add() {
	# Local Printer Data
	declare -n LPD=$1

	# We inc before
	let LPD[rows]++

	LPD[${LPD[rows]}]="$2"
}

printer() {
	declare -n PRINT=$1

  # NoC Number of Columns
	local NoC=${PRINT[fields]}
	local table=""
	local delimiter=""
	local line=""
	local output=""

  # [ functions ]
	repeat output "+${MGC_FLD}" $NoC

	delimiter=$(${PRG_PRINTF} "%s+" $output)

	table="${delimiter}\n${PRINT[header]}\n${delimiter}\n"

	for i in `${PRG_SEQ} 1 ${PRINT[rows]}`; do
		line="${PRINT[$i]}"

		table="${table}${line}\n"
	done

	${PRG_ECHO} -e "${table}\n${delimiter}" | ${PRG_COLUMN} -t -s"${MGC_FLD}" | ${PRG_AWK} '/^\+/{gsub(" ", "-", $0)}1'
	if [ "${GC[SHOW_ROWS_FETCHED]}" == "true" ]; then
		${PRG_ECHO} " (${PRINT[rows]} rows fetched)"
	fi
}

: <<'FUNCTION'
Description: Print whole table (command TABLE)
Parameters:
  $1 - Title
  $2 - Table ID
	$3 - Sample
FUNCTION
printer_dump_table() {
	local _TITLE=$1
	local _TABLE=$2
	local _SAMPLE=$3

	# Lets find the attrs of this relation
	declare -A ATTRS
	ATTRS[id]=$2
	# [ md_attrs ]
	attrs_search ATTRS
	RES=$?
	if [ ! $RES = 0 ]; then
		LOGGER_MSG="Attributes for relation $2 not found"
		eval $LOGGER ERROR
		return 1
	fi
	attrs_get_header ATTRS

	declare -A TAB_PRINT
	printer_init TAB_PRINT ${ATTRS[total]} "${ATTRS[header]}"

	declare -A DATA
	DATA[file]=$_TABLE
	# [ storage ]
	init_file DATA

	# [ storage.next_record ]
	unset REC
	while next_record DATA REC; do
		local ROW="|"
		local k=0
		local value=""

		# Loop the fields in the record struct
		for k in `$PRG_SEQ 1 ${REC[REC_TOT]}`; do
			# Check if value is null
			if [ "${REC[$k]}" == "$MGC_NULL" ]; then
				ROW="$ROW${GC[NULL_TEXT]}${MGC_FLD}|"
			else
				value="${REC[$k]}"
				# Check the type of this attr
				if [ "${ATTRS[${k}_type]}" == "1" ]; then
					# IV = Int Value
					hex_to_int IV "${REC[$k]}"
					RES=$?
					if [ ! $RES == 0 ]; then
						LOGGER_MSG="Fail to convert value ${REC[$k]}"
						eval $LOGGER ERROR
						return 1
					fi
					value="$IV"
				fi
				
				ROW="$ROW${value}${MGC_FLD}|"
			fi
		done

		printer_add TAB_PRINT "$ROW"
	done

	if [ ! "$1" == "" ]; then
		${PRG_ECHO} "$1"
	fi

	printer TAB_PRINT
}
