#!/bin/bash

: <<'COMMENT'
How to use
Those functions manages the struct that is used to print the result on screen
Look at this example:

# Declare the PRINTER variable that will hold all the data
declare -p PRINTER

# Initialize the PRINTER variable, pass the fields names
printer_init PRINTER "field1 field2..."

# Indiciates that we are defining a new row to output
printer_new_row PRINTER

# For each field you should call a printer_row_field in order
printer_row_field PRINTER "value1"	# value1 for field1
printer_row_field PRINTER "value2"	# value2 for field2

# Finally output to screen
printer PRINTER
COMMENT

: <<'FUNCTION'
Description: Initialize a struct for holding printer data
Parameters:
 $1 - The variable that hold the struct
 $2 - List of headers, separated by space
FUNCTION
printer_init() {
	declare -n LPD=$1
	LPD[rows]=0
	LPD[header]="$2"

	local -a temp_array=($2)
	LPD[fields]=${#temp_array[@]}
}

printer_new_row() {
	declare -n _LPD=$1
	let _LPD[rows]++
	let _LPD[fn]=0
}

printer_row_field() {
	declare -n _LPD=$1
	local _value="$2"

	_LPD[${_LPD[rows]},${_LPD[fn]}]="$_value"
	let _LPD[fn]++
}

printer() {
	declare -n PRINT=$1
	local _VER=$2

  # NoC Number of Columns
	local NoC=${PRINT[fields]}
	local table=""
	local delimiter=""
	local line=""
	local output=""

  if [ -z ${PRINT[rows]} ]; then
		${PRG_ECHO} "No rows found"
		return 0
	fi

	if [ "${GC[OUTPUT]^^}" == "TABLE" ]; then
		repeat output "+${MGC_FLD}" $NoC
		delimiter=$(${PRG_PRINTF} "%s+" $output)

		# Define header
		local -a temp_array=(${PRINT[header]})
		header="|"
		for ((i = 0; i < ${#temp_array[@]}; i++)); do
			header="$header ${temp_array[i]}${MGC_FLD}|"
		done

		table="${delimiter}\n${header}\n${delimiter}\n"

		for ((i=1; i <= ${PRINT[rows]}; i++)); do
			line="|"
			for ((f=0; f < $NoC; f++)); do
				line="$line ${PRINT[$i,$f]}${MGC_FLD}|"
			done

			table="${table}${line}\n"
		done

		${PRG_ECHO} -e "${table}\n${delimiter}" | ${PRG_COLUMN} -t -s"${MGC_FLD}" | ${PRG_AWK} '/^\+/{gsub(" ", "-", $0)}1'
		if [ "${GC[SHOW_ROWS_FETCHED]}" == "true" ]; then
			${PRG_ECHO} " (${PRINT[rows]} rows fetched)"
		fi
	elif [ "${GC[OUTPUT]^^}" == "CSV" ]; then
		# Define header
		local -a temp_array=(${PRINT[header]})
		header=""
		delimiter=""
		for ((i = 0; i < ${#temp_array[@]};i++)); do
			header="$header${delimiter}${temp_array[i]}"
			delimiter=";"
		done

		table="${header}\n"

		# rows is 1-based, becuase is the total number of rows
		for ((i=1; i <= ${PRINT[rows]}; i++)); do
			local -a aline=(${PRINT[$i]})
			line=""
		  delimiter=""

			for ((f=0; f < $NoC ;f++ )); do
				line="$line${delimiter}${PRINT[$i,$f]}"
				delimiter=";"
			done

			if [ $i -eq ${PRINT[rows]} ]; then
				table="${table}${line}"
			else
				table="${table}${line}\n"
			fi
		done

		${PRG_ECHO} -e $table
	else
		LOGGER_MSG="Output not recognized ${GC[OUTPUT]}"
		eval $LOGGER ERROR
		return 1
	fi
}

: <<'FUNCTION'
Description: Print whole table (command TABLE)
Parameters:
  $1 - Title
  $2 - Table ID
	$3 - Sample
FUNCTION
printer_dump_table() {
	local _TITLE=$1
	local _TABLE=$2
	local _SAMPLE=$3

	# Lets find the attrs of this relation
	declare -A ATTRS
	ATTRS[id]=$2
	# [ md_attrs ]
	attrs_search ATTRS
	RES=$?
	if [ ! $RES = 0 ]; then
		LOGGER_MSG="Attributes for relation $2 not found"
		eval $LOGGER ERROR
		return 1
	fi
	attrs_get_header ATTRS

	# [ printer ]
	declare -A PRINTER
	printer_init PRINTER "${ATTRS[header]}"

	# [ storage ]
	declare -A DATA
	DATA[file]=$_TABLE
	init_file DATA

	# [ storage.next_record ]
	unset REC
	local row=1
	while next_record DATA REC; do
	  local k=0
		local value=""

		if [[ -n $_SAMPLE && $_SAMPLE -gt 0 ]]; then
		  if [ $row -gt $_SAMPLE ]; then
			  break
			fi
			let row++
		fi

		printer_new_row PRINTER

		# Loop the fields in the record struct
		for (( k=1; k <= ${REC[REC_TOT]}; k++)); do
			# Check if value is null
			if [ "${REC[$k]}" == "$MGC_NULL" ]; then
			  printer_row_field PRINTER "${GC[NULL_TEXT]}"
			else
				value="${REC[$k]}"
				# Check the type of this attr
				if [ "${ATTRS[${k}_type]}" == "1" ]; then
					# IV = Int Value
					hex_to_int IV "${REC[$k]}"
					RES=$?
					if [ ! $RES == 0 ]; then
						LOGGER_MSG="Fail to convert value ${REC[$k]}"
						eval $LOGGER ERROR
						return 1
					fi
					value="$IV"
				fi

				printer_row_field PRINTER "$value"
			fi
		done
	done

	if [ ! "$1" == "" ]; then
		${PRG_ECHO} "$1"
	fi

	printer PRINTER
}
