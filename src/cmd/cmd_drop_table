#!/bin/bash

drop_table_execute() {
	declare -n _SQLTKN=$1

	LOGGER_MSG="Drop table: ${_SQLTKN[TABLE]}"
	eval $LOGGER DEBUG

	local table="${_SQLTKN[TABLE]}"

	declare -A TS
	TS[table]="$table"
	# [ md_table ]
	if ! table_get_struct_by_name TS; then
		# Check if IFEXISTS was supplied
		# When IFEXISTS we do not give error
		if [ "${_SQLTKN[IFEXISTS]}"  == "true" ]; then
			LOGGER_MSG="Skipping table '$table'"
			eval $LOGGER LOG

			writeln "Table '$table' skipped. OK"

			return 0
		else
			LOGGER_MSG="Table '$table' not found"
			eval $LOGGER ERROR
			return 1
		fi
	fi

	# Check if table is in bashbd schema and block
	if [ "${TS[schema]}" == "bashbd" ]; then
		eval $LOGGER ERROR "Cannot drop tables in schema bashbd"
		return 1
	fi

	LOGGER_MSG="Dropping table $table id: ${TS[id]}"
	eval $LOGGER DEBUG

	if [ -z ${TS[position]} ]; then
		eval $LOGGER ERROR "No field pos"
		return 1
	fi

	# Check if the file exists
	if [ ! -f ${TS[id]} ]; then
		eval $LOGGER LOG "The file does not exist. Marking the table not alive"
	else
		${PRG_UNLINK} ${TS[id]}
	fi

	# Set the table as not alive
	LOGGER_MSG="Will mark not alive. file: ${TS[id]} - pos: ${TS[position]}"
	eval $LOGGER DEBUG

	local cvl=0
	let cvl=${TS[position]}+1

	declare -A CH_DATA
	CH_DATA[table]=$CTABLE_TABLES
	CH_DATA[pos]=$cvl
	CH_DATA[data]="0"
	if ! table_change_data CH_DATA; then
		LOGGER_MSG="Fail to change data on table"
		eval $LOGGER ERROR
		declare -p CH_DATA
		return 1
	fi

	writeln "Table ${TS[table]} dropped"

	return 0
}
