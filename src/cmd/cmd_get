#!/bin/bash

get_execute() {
	LOGGER_MSG="Config to get: ${TOKENS[OPTION_full]}"
	# declare -p TOKENS
	eval $LOGGER DEBUG

  local optionTotal=${TOKENS["OPTION_total"]}

  if [ ${optionTotal:-0} -eq 0 ]; then	
		LOGGER_MSG="Get without option. Try GET ALL, or some of the options"
		eval $LOGGER ERROR
		return 1
	fi

	local option="${TOKENS[OPTION_1]^^}"

	if [ "$option" == "RESERVED" ]; then
		local k
		# [ RESERVED = parserv2 ]
		# First order RESERVED
		local ORDERED_RESERVED=($(${PRG_ECHO} ${RESERVED[@]} | ${PRG_TR} " " "\n" | ${PRG_SORT}))

		# [ functions ]
		timing_process

		# [ printer ]
		declare -A PRINTER
		printer_init PRINTER "value"

		for ((k=0; k < ${#ORDERED_RESERVED[@]}; k++ )); do
		  printer_new_row PRINTER
			printer_row_field PRINTER "${ORDERED_RESERVED[$k]}"
		done

		printer PRINTER
		return 0
	fi

	# check if value exists
  if [[ ! "$option" == "ALL" ]]; then
	  for ((i=1; i<= ${TOKENS[OPTION_total]}; i++)); do
		  setting="${TOKENS[OPTION_$i]^^}"
			if [ -z ${GC[$setting]} ]; then
				LOGGER_MSG="Setting $setting is not recognized"
				eval $LOGGER ERROR
				return 1
			fi
		done
	fi

	# [ printer ]
	declare -A PRINTER
	printer_init PRINTER "settings value"

	if [ "$option" == "ALL" ]; then
	  # [ GC = var ]
		local ORDERED_ALL=($(${PRG_ECHO} ${!GC[@]} | ${PRG_TR} " " "\n" | ${PRG_SORT}))
		for i in "${ORDERED_ALL[@]}"; do
		  printer_new_row PRINTER
		  printer_row_field PRINTER "$i"
			printer_row_field PRINTER "${GC[$i]}"
		done
	else
	  local k
		for ((i=1 ; i <= ${TOKENS[OPTION_total]}; i++)); do
			local setting="${TOKENS[OPTION_$i]^^}"
			local value="${GC[$setting]}"

			printer_new_row PRINTER
			printer_row_field PRINTER "$setting"
			printer_row_field PRINTER "$value"
		done
	fi

	# [ functions ]
  timing_process

	printer PRINTER

	return 0
}
