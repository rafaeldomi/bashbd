#!/bin/bash

declare DEF		# Current definition

: <<'COMMENT'
6 fields

field 1
i = identifier / fixed
s = string / user input
m = match value without interaction
g = points to another definition
e = end of definition
o = options list, one must match
n = next token if match

field 2 = modifers / optionals
o = optional field
l = field of list type, separated by comma (,)
e = case f1 = m (match):
   - if match, continues
   - if not match, cannot more tokens/strings
b = Boolean modifier

field 3 = Token to search
if:
  1. Group "m" (f1=m) indicate a value to match
  2. Group "g" (f1=g) point to another definition
  3. Group "o" (f1=o) point to a definition with a list of the values/options

Field 4 = Indicates a name for the variable to save the value in TOKENS
if:
  1. Group "g" (f1=g) indicates a prefix to use in TOKENS
  2. Group "m" (f1=m) and modifier boolean, indicates a value to save the boolean
		if this field have no value will use the name of the token, at field 3

field 5 = points to some DEF if matches
se for f2 = opcional, se der match chama essa definição de forma obrigatoria

field 6 = points to a definition that contains values that should be
		   checked to finish this definition

ERROR
codes
1 - General Error
2 - Infinite Loop
3 - Syntax error. Expected operator not found
4 - SQL Command not found
COMMENT

# -------------------
# Auxs
# -------------------
# Key=Value
declare -r DEF_KV=(s:::KEY m::=: s:::VALUE)

# -------------------
# Commands
# -------------------
# TRUNCATE [TABLE] (name,...)
declare -r DEF_TRUNCATE=(i::TRUNCATE:CMD i:o:TABLE: s:l::TABLE e:)

# TABLE (NAME) [SAMPLE]
declare -r DEF_TABLE=(i::TABLE:CMD s:::TABLE m:ob:SAMPLE e:)

# SET (setting=value,...)
declare -r DEF_SET=(i::SET:CMD g:l:DEF_KV:KV: e:)

# GET (ALL|setting,setting)
declare -r DEF_GET=(i::GET:CMD s:l::OPTION e:)

# RESET (ALL|setting,setting)
declare -r DEF_RESET=(i::RESET:CMD s:l::SETTING e:)

# REINDEX (INDEX|TABLE) name
declare -r DEF_REINDEX=(i::REINDEX:CMD o::DEF_REINDEX_VALUES:TYPE s:l::OBJECT e:)
declare -r DEF_REINDEX_VALUES=(INDEX TABLE)

# COMMENT ON (TABLE|INDEX|COLUMN|FUNCTION|TRIGGER) (OBJECT) IS '' [APPEND];
declare -r DEF_COMMENT_TYPES=(TABLE INDEX COLUMN FUNCTION TRIGGER VIEW SCHEMA)
declare -r DEF_COMMENT=(i::COMMENT:CMD i::ON o::DEF_COMMENT_TYPES:TYPE s:::OBJECT i::IS s:::VALUE m:ob:APPEND e:)

# SHOW COMMENT ON (TABLE|INDEX|COLUMN|FUNCTION|TRIGGER)
declare -r DEF_SHOW=(i::SHOW:CMD i::COMMENT i::ON o::DEF_COMMENT_TYPES:TYPE s:::OBJECT)

# Creates

# CREATE SCHEMA [IFNOTEXISTS] (name,...)
declare -r DEF_CREATE_SCHEMA=(i::CREATE:CMD i::SCHEMA:OBJECT m:ob:IFNOTEXISTS s:l::SCHEMA e:)

# CREATE TABLE (name) ( {DEF_ATTRS}  )
declare -r DEF_CREATE_TABLE=(i::CREATE:CMD i::TABLE:OBJECT s:::NAME m::\(: g:l:DEF_ATTRS:FLD m::\):  e:)
declare -r DEF_ATTRS=(s:::NAME s:::TYPE m:o:NOTNULL n:o:DEFAULT:DEFAULT)

# CREATE [UNIQUE] INDEX [IFNOTEXISTS] (name) ON (table) ( (col,...))
declare -r DEF_CREATE_INDEX=(i::CREATE:CMD i:o:UNIQUE:UNIQUE i::INDEX:OBJECT i:o:IFNOTEXISTS:EXISTS \
						  s:::NAME m::ON: s:::TABLE m::\(: s:l::COL m::\): e:)

# Drops
# DROP SCHEMA [IFEXISTS] (schema,...) [CASCADE]
declare -r DEF_DROP_SCHEMA=(i::DROP:CMD i::SCHEMA:OBJECT m:ob:IFEXISTS s:l::SCHEMA m:ob:CASCADE e:)

# DROP TABLE [IFEXISTS] (table, ...)
declare -r DEF_DROP_TABLE=(i::DROP:CMD i::TABLE:OBJECT m:ob:IFEXISTS s:l::TABLE e:)

# INSERT
# insert into (table) ( (col1,...)) VALUES ( (value1,...)),((value1,...))
# insert into (table) ( (col1,...)) select ...
# insert into (table) 
declare -r DEF_INSERT=(i::INSERT:CMD m::INTO s:::TABLE e:)

# DELETE
# delete from table1
# delete from table1 where a=b
declare -r DEF_DELETE=(i::DELETE:CMD m::FROM s:::TABLE e:)

# UPDATE
# update table1 set (col1=col2,...) [WHERE (col1=col2,...)]
declare -r DEF_UPDATE=(i::UPDATE:CMD s:::TABLE m::SET g::DEF_KV:KV e: )

# SELECT
# SELECT {FIELDS:DEF_SEL_FIELDS} FROM {TABLES:DEF_SEL_TABLES} {DEF_WHERE}
declare -r DEF_SELECT=(i::SELECT:CMD g:l:DEF_SEL_FIELDS:FLD m:oe:FROM: g:l:DEF_SEL_TABLES:FROM m:ol:WHERE:DEF_WHERE e:)

# fieldname {( DEF_SEL_PO )} {OPERATORS:STRING} {ALIAS}
declare -r DEF_SEL_FIELDS=(s:::FIELD o:o:DEF_PO:PO:DEF_SEL_PO o:o:DEF_OPERS:OPER:DEF_STRING n:o:AS:ALIAS)
declare -r DEF_SEL_TABLES=(s:::TABLE m:o:AS s:o::TABLE_ALIAS)
declare -r DEF_STRING=(s:::VALUE)

declare -r DEF_WHERE=()
declare -r DEF_SEL_PO=(g::DEF_SEL_FIELDS:FP m::\):)

declare -r DEF_OPERS=(- \+ '\*' / \=)

# PO - Parenthesis Open
declare -r DEF_PO=(\()
# PC - Parenthesis Close
declare -r DEF_PC=(\))

declare -A PARSE_DEF
readonly PARSE_DEF=(
	[TRUNCATE]=DEF_TRUNCATE
	[TABLE]=DEF_TABLE
	[CREATE_SCHEMA]=DEF_CREATE_SCHEMA
	[CREATE_TABLE]=DEF_CREATE_TABLE
	[CREATE_INDEX]=DEF_CREATE_INDEX
	[DROP_SCHEMA]=DEF_DROP_SCHEMA
	[DROP_TABLE]=DEF_DROP_TABLE
	[SET]=DEF_SET
	[GET]=DEF_GET
	[SHOW]=DEF_SHOW
	[REINDEX]=DEF_REINDEX
	[SELECT]=DEF_SELECT
	[INSERT]=DEF_INSERT
	[DELETE]=DEF_DELETE
	[UPDATE]=DEF_UPDATE
	[RESET]=DEF_RESET
	[COMMENT]=DEF_COMMENT
)

declare readonly RESERVED=(TRUNCATE TABLE SELECT UPDATE INSERT DELETE CREATE SCHEMA \
    AND OR DESC ASC WHERE ORDER BY GROUP AS FROM INDEX SET VALUES INTO IFNOTEXISTS \
		DROP IFEXISTS SHOW ALL IS REINDEX ON RESET CASCADE COMMENT GET \
		NOTNULL DEFAULT TRIGGER FUNCTION)

parse_log() {
	echo "$1"
}

parse() {
	local CMD=${TOKENS[1]}
	local OBJ=${TOKENS[2]}
	local TKN=""

	if [[ "$CMD" == "CREATE" ||
	      "$CMD" == "DROP" ]]; then
		TKN="${CMD}_${OBJ}"
	else
		TKN="${CMD}"
	fi
	parse_log "Will search for: $TKN"

	# Search for a definition
	local U="${PARSE_DEF[$TKN]}"

	if [ ! -z $U ]; then
		declare -n CMD_DEF="$U"
	else
		ERROR[CODE]=4
		ERROR[MSG]="Command $TKN Not found"
		return ${ERROR[CODE]}
	fi

	do_parse
}

make_prop() {
	local IFS=":"
	parse_log "  $1"
	DEF=($1)

	#echo "  | `declare -p DEF`"
}

do_parse() {
	echo ""
	echo "** DO PARSE"
	echo "** DEF PRINCIPAL: ${CMD_DEF[@]}"

	pos_sql=1 # Aonde estamos no SQL
	level=0

	do_loop CMD_DEF

	if [ ! -z ${ERROR[code]} ]; then
		echo "ERROR: ${ERROR[msg]}"
	else
		echo "FINISHED"
	fi

	for key in $(echo "${!TOKENS[@]}" | tr ' ' '\n' | sort); do
	   echo "$key=${TOKENS[$key]}"
	done
	declare -p TOKENS
}

# $1 - DEFINITION
# $2 - prefix to add to name
do_loop() {
	# This let is NOT 'local'
	let level++
	local prf_local="${2}"

	# Local variables
	local pos_def=0 # My position in definition array on this call
	local pref=""
	local g=0
	local mod_opc=0
	local mod_list=0
	local mod_end=0
	local mod_bool=0

	declare -n DEF_CMD="$1"

	parse_log "
========================= NEW LOOP ======================="
	echo "New loop pointing to $1 ($pos_def) - Prefix: $prf_local"
	echo "${DEF_CMD[@]} => ${DEF_CMD[0]}"

	# The correct way to exits from this while is using a break. Do not use return
	while true; do
		parse_log "
      .... LOOPING ....
  *** level: $level | loop: $g | pos_sql: $pos_sql | pos_def: $pos_def *** Prefix: $prf_local
"

		# Does the SQL has more tokens?
		if [ -z ${DEF_CMD[$pos_def]} ]; then
			parse_log "LOOP ($level): does not have more values to analyze"
			break
		fi

		# Open the fields definition
		make_prop "${DEF_CMD[$pos_def]}"

		# Check for the modifiers
		mod_opc=0
		mod_list=0
		mod_end=0
		mod_bool=0
		if [ ! -z "${DEF[1]}" ]; then
			echo "  | Modifiers: ${DEF[1]}"

			let sz=${#DEF[1]}-1
			for i in `seq 0 $sz`; do
				sv="${DEF[1]:$i:1}"
				case $sv in
					o) mod_opc=1
						;;
					l) mod_list=1
						;;
					e) mod_end=1
						;;
					b) mod_bool=1
						;;
				esac
			done
		fi
		parse_log "  |  - Opcional: $mod_opc | List: $mod_list | End: $mod_end | Boolean: $mod_bool"

		value_token="${DEF[2]}"
		value_sql="${TOKENS[$pos_sql]}"

		echo "  | VALUE_SQL: $value_sql | VALUE_TOKEN: $value_token"

		# Se for ; e tipo e no TOKENS e nao for DEF[0] = e podemos dar erro
		if [[ "$value_sql" == ";" &&
			  "${TOKENS[${pos_sql}_t]}" == "e" &&
			  ! "${DEF[0]}" == "e" ]]; then
			echo "Termino de SQL antes do esperado"
			break
		fi

		# DEF
		#  0 = identificador -- i s e g
		case ${DEF[0]} in
			# Next token
			n)  parse_log "  | GROUP: Next Token"
				if [ "$value_sql" == "${DEF[2]}" ]; then
					parse_log "  | Found a Match"
					let pos_sql++
					let pos_def++
					local prefix

					# Get the next token
					value_sql="${TOKENS[$pos_sql]}"
					if [ ! -z $multi ]; then
						add="_$multi"
					fi
					if [ "$prf_local" == "" ]; then
						prefix="${DEF[3]}"
					else
						prefix="${prf_local}_${DEF[3]}"
					fi

					TOKENS[${prefix}${add}]="$value_sql"

					parse_log "  | Next value: $value_sql"
					let pos_sql++
				else
					# Check if is optional

					if [ "${DEF[1]}" == "o" ]; then
						let pos_def++
						continue
					else
						# Not optional, so syntax sql error
						ERROR[code]=3
						ERROR[msg]="Expected operator not found. Check your SQL"
						parse_log "${ERROR[msg]}"
						break
					fi
				fi
			   ;;

			# Options group
			o)	
				parse_log "  | GROUP: Multivalue Option [${DEF[3]}]"
				local found=0
				local j=0
				local pref=""

				# Prefix
				if [ "$prf_local" == "" ]; then
					pref="${DEF[3]}"
				else
					pref="${prf_local}_${DEF[3]}"
				fi

				if [ ! -z $multi ]; then
					add="_$multi"
				else
					add=""
				fi

				# Do not need to unset the variable here because without the -G flag
				#	the array lives just inside this function call
				declare -n A="${DEF[2]}"
				parse_log  "  | Search ${DEF[2]} => Array to analyze: ${A[@]}"

				# If the array has size 0 means that something in the previous
				#   'declare -n' get wrong. May the definition does not exists?
				if [ ${#A[@]} == 0 ]; then
					parse_log "Without values in the array. ERROR"
					ERROR[code]="1"
					ERROR[msg]="Without value in the array"
					break
				fi

				# Loop the array searching for the value
				for i in ${A[@]}; do
					# echo "$i (${i:0:1})== $value_sql"
					# This is a trick because '*' expands and list all files in the directory
					#  Maybe there is a way to do this without this 'trick'
					if [ "${i:0:1}" == "\\" ]; then
						j=${i:1:1}
						#echo "j: $j"
					else
						j="$i"
					fi
					if [ "$j" == "$value_sql" ]; then
						parse_log "  | ** $j == $value_sql Found a match"
						TOKENS[${pref}${add}]="$value_sql"
						found=1
						break
					fi
				done

				# if FOUND and has a another def to call
				#   Check if must call another definition
				if [[ "$found" == 1 && ! -z ${DEF[4]} ]]; then
					# This variable must be local, to live just inside this function call
					local tgrp="${DEF[4]}"

					# As we found a match, we can "walk" the sql defition
					let pos_sql++

					parse_log "  | Call the definition: $tgrp"
					do_loop "$tgrp" $prf_local
					if [ ! -z ${ERROR[code]} ]; then
						echo "  | The call got a error. Breaking"
						break
					fi

					continue
				fi

				if [ $found == 0 ]; then
					if [ ! "${DEF[1]}" == "o" ]; then
						echo "SQL nao formado corretamente"
						echo "Opcional? ${DEF[1]}"
						break
					else
						echo "não achou mas é opcional. Anda def"

						let pos_def++
						continue
					fi
				else
					let pos_sql++
					let pos_def++
				fi

				;;

			# Its a group define
			g)	local tgrp="${DEF[2]}"
				parse_log "  | GROUP: Group"

				if [ "$prf_local" == "" ]; then
					pref="${DEF[3]}"
				else
					pref="${prf_local}${DEF[3]}"
				fi

				# These variables must be local
				local a=1
				local lf=1 # check LoopForever

				while true; do
					export multi="$a"

					parse_log "  | Calling: $tgrp"

					# Call the group definition
					do_loop $tgrp $pref

					unset multi

					# Check the next token to evaluates if we must continue or break
					#  la = look-ahead
					value_la="${TOKENS[$pos_sql]}"

					TOKENS[${pref}_total]=$a

					if [ "$value_la" == "," ]; then
						let pos_sql++
					else
						break
					fi

					# A check for not looping forever
					let a++
					let lp++
					if [ $lp -gt 200 ]; then
						parse_log "()()() NON_TERMINATING LOOP ()()()"
						ERROR[code]=2
						ERROR[msg]="Infinite loop. Something Wrong"
						break
					fi
				done

				let pos_def++
				;;

			# match without interaction
			m)
				parse_log "  | GROUP: Match"
				parse_log "  |  Search: $value_token"

				local prefix
				if [ "$prf_local" == "" ]; then
					prefix="${DEF[3]-${DEF[2]}}"
				else
					prefix="${prf_local}_${DEF[3]-${DEF[2]}}"
				fi
				if [ ! -z $multi ]; then
					prefix="${prefix}${add}"
				fi

				# We have a match
				if [ "${value_sql^^}" == "${value_token^^}" ]; then
					# Check if we have the boolean modifier
					if [ ! -z $mod_bool ]; then
						TOKENS[${prefix}]="true"
					fi

					let pos_sql++
					let pos_def++
					continue
				fi

				# If we are here means that have not found a match
				# Set false if the boolean modifier is present
				if [ ! -z $mod_bool ]; then
					TOKENS[${prefix}]="false"
				fi

				if [[ -z ${TOKENS[$pos_sql]} && $mod_end == 1 ]]; then
					echo "Tudo certo, não precisa mais continuar"
					break
				fi

				# mod_opc = optional modifier
				if [ $mod_opc == 1 ]; then
					let pos_def++
				else
					echo "SQL syntax error. Check SQL"
					break
				fi

				;;
			# Identificador / literal
			i) 
				parse_log "  | GROUP: Identifier"
				parse_log "  | Search for: $value_token"

				if [ "$value_sql" == "$value_token" ]; then
					parse_log "  | FOUND"
					if [ ! -z ${DEF[3]} ]; then
						# Salvar o nosso valor de m no def[3]
						TOKENS[${DEF[3]}]="$value_sql"
					fi
				else
					# Check if has a optional modifier, if so just continue
					if [ $mod_opc -eq 1 ]; then
						let pos_def++
						continue
					else
						# if not optional, we have a syntax error
						ERROR[code]=3
						ERROR[msg]="Expected operator not found. Check your SQL"
						parse_log "${ERROR[msg]}"
						break
					fi
				fi

				let pos_sql++
				let pos_def++
				;;

			# string field f1=s
			s)
				parse_log "  | GROUP: Input/String"
				if [ ! -z ${prf_local} ]; then
					pref="${prf_local}_${DEF[3]}"
				else
					pref="${DEF[3]}"
				fi

				parse_log "  | Prefix? $pref"

				# To control a list definition
				local tot=1

				# if modifier we can have a value list separated by comma(,)
				while true; do
					parse_log "  | Found value: $value_sql"

					# If we do not have value, we reach the end of string
					if [ "${#value_sql}" == 0 ]; then
						break
					fi

					# We can advance a position in the SQL command
					let pos_sql++

					if [ ! -z "$multi" ]; then
						echo " Considering multi: ${multi}"
						add="_$multi"
					else
						add=""
					fi

					# Check if has a list modifier
					if [ $mod_list -eq 1 ]; then
						TOKENS[${pref}_total]=$tot
						TOKENS[${pref}_$tot]="$value_sql"
						if [ $tot -eq 1 ]; then
							TOKENS[${pref}_full]="$value_sql"
						else
						  TOKENS[${pref}_full]="${TOKENS[${pref}_full]},$value_sql"
						fi

						let tot++
					else
						TOKENS[${pref}${add}]="$value_sql"

						break
					fi

					# Look ahead (la) and check if its a separator
					value_la="${TOKENS[$pos_sql]}"
					echo "LookAhead value $value_la"
					if [ "$value_la" == "," ]; then
						# found a list separator, lets move on and check one more
						echo "found comma, move on pos_sql and continue loop ($pos_sql)"
						let pos_sql++
						echo "  now: $pos_sql"
						value_sql="${TOKENS[$pos_sql]}"
						continue
					fi

					if [ $tot -gt 10 ]; then
						return
					fi

					break

					# if [ -z $value_la ]; then
					# 	echo "No more values"
					# 	break
					# fi

					# if [[ "$value_la" == ";" ||
					#       "$value_la" == ")" ]]; then
					# 	break
					# fi
				done

				# Now we can move on the definition
				let pos_def++
				;;

			e)
				echo "This is an indicator that should not have any more tokens in array"

				if [ "$value_sql" == ";" ]; then
					echo "OK. finished with ;"
					break
				fi

				if [ ! -z ${TOKENS[$pos_sql]} ]; then
					echo "Unexpected value on SQL command. Check your syntax"
					return 1
				else
					echo "OK. Finished with success"
					return 0
				fi
				;;
			*)
				echo "ID ${DEF[0]} not treated"
				;;
		esac

		#declare -p TOKENS

		let g++
		if [ $g -gt 20 ]; then
			echo ""
			echo "more than  100loops. Leaving"
			break
		fi
	done

	if [ ! -z "${ERROR[code]}" ]; then
		echo "Unexpected error"
		echo "${ERROR[msg]}"
	fi

	let level--
}

create_tkn() {
	echo "create_tkn -> $1 - $2 ($tn)"

	local tmp="${1^^}"
	local val="${1}"
	local typ="$2"

	# Check if is reserved (SQL especify)
	if [[ $in_str == 0 && $in_lit == 0 ]]; then
		for t in ${RESERVED[@]}; do
			if [ "$t" == "${tmp}" ]; then
				typ="reserved"
				val="${1^^}"
			fi
		done
	fi

	TOKENS[$tn]="$val"
	TOKENS[${tn}_t]="$typ"
	TOKENS[${tn}_pos]="$pos"
	TOKENS[total]=$tn
	TOKENS[${tn}_l]="$level"

	value=""
	in_tkn=0
	unset type
	unset pos

	let tn=$tn+1
}

# The main function to call to parse the SQL
# This functions will do:
#  1. Tokenize the SQL string
#  2. Parse. Analyze the tokens and build a "struct" to be used later by the executor
parse_sql() {
	local ts=${#1}
	local par="$1"
	
	# These variables must be initialized here. Do not change the location
	value=""
	pos=""
	tn=1
	in_str=0
	in_tkn=0
	in_lit=0

	# This variable is global (-g)
	unset ERROR
	declare -gA ERROR

	unset TOKENS
	declare -gA TOKENS
	TOKENS[SQL]="$1"

	parse_log "Total size in char: $ts"

	# Check for a empty string
	if [ $ts == 0 ]; then
		ERROR[code]=1
		ERROR[msg]="Input SQL is empty"
		parse_log "${ERROR[msg]}"
		return 1
	fi

	# Instead of using a process that tokenize all string based on a separator
	#  like (read -a TOKENS <<< $1), I realize that doing a tokenizer give me more
	#  control in this step and gave best results
	for i in `seq 0 $ts`; do
		# Some variable inside the loop must be declared with the local identifier
		local c="${par:i:1}"

		parse_log "** Evaluating |$c| Size: ${#c}"

		# We reached the end of the string
		if [ "${#c}" == 0 ]; then
			parse_log "End of the String"
			break
		fi

		# In a space we can have 2 scenarios:
		#  1. Separator of tokens in the string
		#  2. A normal character inside a string
		if [ "$c" == " " ]; then
			if [ $in_tkn == 0 ]; then
				# Found space
				continue
			else
				# If we are inside a string we must follow the workflow
				# . This if is "OR"
				if [[ $in_str -eq 1 || $in_lit -eq 1 ]]; then
					parse_log "Found space, but inside string. Continue workflow"
				else
					parse_log "Found space in_tkn: $in_tkn. Creating token"
					create_tkn "$value" "generic"
					continue
				fi
			fi
		fi

		# Check for separator of operator
		# 	But only if we are not inside a string
		#   . This if is "AND"
		if [[ $in_str == 0 && $in_lit == 0 ]]; then
			case "$c" in
				\;)
					# e = end of sql command
					if [ ${#value} -gt 0 ]; then
						create_tkn "$value" "generic"
					fi
					create_tkn "$c" e
					continue
					;;
			
				# = ( ) , + - / *		
				=|\(|\)|,|+|-|/|\*)
					if [ ! ${#value} == 0 ]; then
						pos="left"
						create_tkn "$value" "generic"
					fi

					# o = operator
					# s = separator
					# gi = group init
					# ge = group end
					# u = unkown
					case "$c" in
						=|-|+|/|\*) oper="o";;
						,) oper="s";;
						\() oper="gi"; let level++;;
						\)) oper="ge"; let level--;;
						*) oper="u";;				
					esac

					create_tkn "$c" $oper
					pos="right"
					continue
					;;
			esac
		fi

		# " means a string, that may contains space and others characters that must
		#		be treated like string (!)
		if [ "$c" == "\"" ]; then
			if [ $in_str == 0 ]; then
				# Its the begginig
				in_str=1
				in_tkn=1
				continue
			else
				# Its the end of the string
				in_str=0
				create_tkn "$value" "string"
				continue
			fi
		fi

		# ' means a LITERAL string
		if [ "$c" == "'" ]; then
			if [ "$in_lit" == 0 ]; then
				# Its the beginning
				in_tkn=1
				in_lit=1
				continue
			else
				# Its the end of the string
				in_lit=0
				create_tkn "$value" "literal"
				continue
			fi
		fi

		in_tkn=1

		# Concatenate the value
		value="$value$c"
		echo "|$value|"
	done

	# If we reach this point and the variable in_tkn = 1 means that we have a value
	#	to create token
	if [ $in_tkn == 1 ]; then
		create_tkn "$value" "generic"
	fi

	# Print some values
	declare -p TOKENS

	let sz=${TOKENS[total]}
	for tot in `seq 1 $sz`; do
		#echo "$tot"
		echo "KEY: ${TOKENS[$tot]}"
		echo "  type: ${TOKENS[${tot}_t]}  | pos: ${TOKENS[${tot}_pos]}  | level: ${TOKENS[${tot}_l]}"
	done

	# Do the real work now
	parse

	return ${ERROR[code]}
}
