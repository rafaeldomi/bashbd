#!/bin/bash

if [ ! $LOG_INCLUDED ]; then
LOG_INCLUDED=1

: <<'COMMENT'
writeln 	Just a simple echo
log				Normal log
debug			Messages of debug, program internals
LOGGER
	-> Use this version
		eval $LOGGER [LEVEL] [MSG]
	-> To messages that have variable in it, or ", save the content to the LOGGER_MSG variable
COMMENT

# COLORS
CL_RED='\033[1;31m'
CL_GREEN='\033[1;32m'
CL_YELLOW='\033[1;33m'
CL_BLUE='\033[1;34m'
CL_MAGENTA='\033[1;35m'
CL_CYAN='\033[1;36m'
# NoColor
CL_NC='\033[0m'

declare -r -A LL=(
			[FATAL]=1
			[ERROR]=2
			[WARNING]=3
			[HINT]=4
			[LOG]=5
			[DEBUG]=6
			[DEBUG1]=7
			[DEBUG2]=8
		)

: <<'FUNCTION'
Description: Print a debug string
Parameters:
  $1 - function name
  $2 - line number
  $3 - message
FUNCTION
debug() {
	if [ "$DEBUG" = "1" ]; then
		${PRG_PRINTF} "%s:%s - %s\n" "$1" "$2" "$3"
	fi
}

writeln() {
	${PRG_PRINTF} "%b\n" "$1"
}

: <<'FUNCTION'
Description: Check if can do the log
Parameters:
 $1 - Log level to check, the name
FUNCTION
log_can_log() {
	local IDXLL=${LL[$1]}
	if [ -z $IDXLL ]; then
		writeln "$1 not recognized"
		return 1
	fi

	# Now check if we do the log
	if [ $IDXLL -le ${GC[MIN_LOG]} ]; then
		return 0
	else
		return 1
	fi
}

# $1 - FUNCNAME
# $2 - LINENO
# $3 - Level (FATAL - LOG - ERROR)
# $4 - Message
log () {
	local _FUNC=$1
	local _LINE=$2
	local _LEVEL=$3
	local fnc_name=""
	local VALUES=""

	# Order of the importance of logs
	# 1 - FATAL
	# 2 - ERROR
	# 3 - WARNING
	# 4 - HINT
	# 5 - LOG
	# 6 - DEBUG
	# 7 - DEBUG1
	# 8 - DEBUG2

	MSG=""
	if [ -z ${4} ]; then
		MSG="${LOGGER_MSG}"
		unset LOGGER_MSG
	else
		VALUES=($@)
		SPC=""
		local i=0
		for i in `$PRG_SEQ 3 ${#}`; do
			MSG="$MSG${SPC}${VALUES[i]}"
			SPC=" "
		done
	fi

	# If is ERROR or FATAL do a writeln too
	if [[ "$_LEVEL" == "ERROR" || "$_LEVEL" == "FATAL" ]]; then
	  if [ ${GC[COLOR]} == "normal" ]; then
	  	MSG="${CL_RED}${MSG}${CL_NC}"
		fi
		writeln "${MSG}"
	fi

	# Check if we do log
	if ! log_can_log $_LEVEL; then
		return 0
	fi

	fnc_name="$_FUNC"
	if [ "${#_FUNC}" -gt 20 ]; then
		fnc_name="${_FUNC:0:18}.."
	fi

	$PRG_PRINTF "%s [%20s:%-3s %6s]: %b\n" "`date +\"%D %T\"`" "$fnc_name" "$_LINE" "$_LEVEL" "$MSG"

	if [ "$_LEVEL" == "FATAL" ]; then
		$PRG_PRINTF "%s [%14s:%-3s %6s]: %s\n" "`date +\"%D %T\"`" "$_FUNC" "$_LINE" "$LL" "EXITING PROGRAM BECAUSE OF FATAL ERROR"
		finish 1
	fi
}

: <<'FUNCTION'
Description: print the variable value
Parameters:
 $1 - Name of the variable
FUNCTION
log_variable() {
	local _V=$1

	# Always DEBUG2
	if  log_can_log DEBUG2; then
		declare -p $_V
	fi
}

fi
