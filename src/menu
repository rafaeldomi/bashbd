#!/bin/bash

: <<'COMMENT'
backslash_menu			Executes the backslash commands
menu_show_help_cmd	Show commands definition
COMMENT

backslash_menu() {
	# Break in tokens
	# TKN 0 = The command
	# TKN 1 = Option (optinal by command)
	local TKN=(${@})

	# Vim shows that using "$array_var[x]:init" is wrong, but is correct
	case "${TKN[0]:1}" in
		q)  finish 0;;
		## TODO
		## Find a better place to put the menu_list functions
		# menu.menu_list
		c)  menu_list "comments"   $CTABLE_COMMENTS;;
		t)  menu_list "tables"     $CTABLE_TABLES;;
		s)  menu_list "schemas"    $CTABLE_SCHEMAS;;
		f)  menu_list "functions"  $CTABLE_FUNCTIONS;;
		S)  menu_list "sequences"  $CTABLE_SEQUENCE;;
		y)  menu_list "types"      $CTABLE_TYPES;;
		l)  menu_list "languages"  $CTABLE_LANG;;
		i)  menu_list "indexes"    $CTABLE_INDEX;;
		a)  menu_list "attributes" $CTABLE_ATTRS;;

		c)  menu_warm_cache "${TKN[1]}";;
		b)  menu_call_function ${TKN[@]:1} ;;
		\?)	menu_show_help;;
		h)  menu_show_help_cmd ${TKN[@]:1} ;;
		env) menu_show_variable ${TKN[@]} ;;
		function) menu_call_function ${TKN[@]:1} ;;
		*)  echo "Option '$PAR' not recognized"
	esac

	return 0
}

menu_show_variable() {
	if [ -z $2 ]; then
		LOGGER_MSG="\env but variable not supplied"
		eval $LOGGER ERROR 
		return 1
	fi

	log_variable $2
}

menu_show_help() {
	writeln "Command menu"
	writeln ""
	writeln "\\?        Show this help"
	writeln "\\h [CMD]  Show syntax example for the command"
	writeln ""
	writeln "Database objects:"
	writeln "\\\a       List attributes"
	writeln "\\\c       List comments"
	writeln "\\\f       List functions"
	writeln "\\\i       List indexes"
	writeln "\\\l       List languages"
	writeln "\\\s       List schemas"
	writeln "\\\S       List sequences"
	writeln "\\\t       List tables"
	writeln "\\\y       List types"
	writeln ""
	writeln "\\\env     Print internal variable - just for dev"
	writeln ""
	writeln "\\\q       Quit program"
}

: <<'FUNCTION'
Description: Show command definition
Parameters:
  $1 - Command
FUNCTION
menu_show_help_cmd() {
	local OUTPUT=""
	local CMD="${1^^}"
	local SUBCMD="${2^^}"

	if [ -z $1 ]; then
		COMMANDS="GET,SET,RESET,TABLE,CREATE SCHEMA,SHOW COMMENT,DROP SCHEMA"
		OUTPUT=$(${PRG_ECHO} "$COMMANDS" | ${PRG_COLUMN} -s, -t)
	fi

  local idx_syntax="${CMD}${SUBCMD:+"_${SUBCMD}"}_syntax"
	local idx_desc="${CMD}${SUBCMD:+"_${SUBCMD}"}_description"

  OUTPUT="${DEF_COMMANDS_HELP[$idx_syntax]}"
	OUTPUT_DESC="${DEF_COMMANDS_HELP[$idx_desc]}"

  writeln "SQL Command: ${CMD} ${SUBCMD}"
	if [ ! "$OUTPUT_DESC" == "" ]; then
		writeln "Description: $OUTPUT_DESC"
	fi
	writeln "$OUTPUT"
}

###################################################
###################################################
# $1 - Id of the table to list
menu_list() {
	# [ printer ]
	printer_dump_table "Listing $1" $2
}

menu_warm_cache() {
	# Do the cache if necessary
	cache_do_cache $CTABLE_SCHEMAS
}

menu_call_function() {
	# LOGGER_MSG="Call fn: $1"
	local RET
	eval ${1} RET ${@:2}
	writeln $RET
}
