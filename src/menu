#!/bin/bash

: <<'COMMENT'
cmd_menu: Show menu
menu_show_help_cmd: Show command definition
COMMENT

cmd_menu() {
	if [ "${1^^}" == "HELP" ]; then
		menu_show_help
		return 0
	fi

	# Break in tokens
	# TKN 0 = The command
	# TKN 1 = Option (optinal by command)
	local TKN=(${@})

	# Vim shows that using "$array_var[x]:init:end" is wrong, but is correct
	case "${TKN[0]:1:1}" in
		q)  finish 0;;
		## TODO
		## Find a better place to put the menu_list functions
		# menu.menu_list
		c)  menu_list "comments"   $CTABLE_COMMENTS;;
		t)  menu_list "tables"     $CTABLE_TABLES;;
		s)  menu_list "schemas"    $CTABLE_SCHEMAS;;
		f)  menu_list "functions"  $CTABLE_FUNCTIONS;;
		S)  menu_list "sequences"  $CTABLE_SEQUENCE;;
		y)  menu_list "types"      $CTABLE_TYPES;;
		l)  menu_list "languages"  $CTABLE_LANG;;
		i)  menu_list "indexes"    $CTABLE_INDEX;;
		a)  menu_list "attributes" $CTABLE_ATTRS;;

		c)  menu_warm_cache "${TKN[1]}";;
		b)  menu_call_function ${TKN[@]:1} ;;
		\?)	menu_show_help;;
		h)  menu_show_help_cmd ${TKN[@]:1} ;;
		*)  echo "Menu Comando $PAR nÃ£o reconhecido"
	esac

	return 0
}

menu_show_help() {
	writeln "Command menu"
	writeln ""
	writeln "\\?        Show this help"
	writeln "\\h [CMD]  Show syntax example for the command"
	writeln ""
	writeln "Database objects:"
	writeln "\\\a       List attributes"
	writeln "\\\c       List comments"
	writeln "\\\f       List functions"
	writeln "\\\i       List indexes"
	writeln "\\\l       List languages"
	writeln "\\\s       List schemas"
	writeln "\\\S       List sequences"
	writeln "\\\t       List tables"
	writeln "\\\y       List types"
	writeln ""
	writeln "\\\q       Quit program"
}

: <<'FUNCTION'
Description: Show command definition
Parameters:
  $1 - Command
FUNCTION
menu_show_help_cmd() {
	local OUTPUT=""
	local CMD="${1^^}"
	local SUBCMD="${2^^}"

	if [ -z $1 ]; then
		COMMANDS="GET,SET,RESET,TABLE,CREATE SCHEMA,SHOW COMMENT,DROP SCHEMA"
		OUTPUT=$(${PRG_ECHO} "$COMMANDS" | ${PRG_COLUMN} -s, -t)
	fi

	# echo $1
	if [ "$CMD" == "GET" ]; then
	  OUTPUT="SQL Command: GET
Description: Get global configuration variables. If get reserved will get the reserved tokens
Syntax: GET [RESERVED|ALL|setting,...]"
	fi
	if [ "$CMD" == "SET" ]; then
		OUTPUT="SET [config=value,...]"
	fi
	if [ "$CMD" == "RESET" ]; then
	  OUTPUT="RESET [ALL|config,...]"
	fi
	if [ "$CMD" == "TABLE" ]; then
	  OUTPUT="TABLE [table] (SAMPLE)"
	fi
	if [ "$CMD" == "CREATE" ]; then
	  if [ "$SUBCMD" == "SCHEMA" ]; then
	  	OUTPUT="CREATE SCHEMA [IFNOTEXISTS] (schema,...)"
		fi
	fi
	if [ "$CMD" == "DROP" ]; then
		if [ "$SUBCMD" == "SCHEMA" ]; then
			OUTPUT="DROP SCHEMA [IFEXISTS] (schema,...) [CASCADE]"
		fi
	fi
	if [ "$CMD" == "SHOW" ]; then
	  OUTPUT="SHOW COMMENT ON (table|schema|function|sequence) (object)"
	fi

	# echo $OUTPUT

	writeln "$OUTPUT"
}

###################################################
###################################################
# $1 - Id of the table to list
menu_list() {
	# [ printer ]
	printer_dump_table "Listing $1" $2
}

menu_warm_cache() {
	# Do the cache if necessary
	cache_do_cache $CTABLE_SCHEMAS
}

menu_call_function() {
	# LOGGER_MSG="Call fn: $1"
	eval $1 $2 $3
}
