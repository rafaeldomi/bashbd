#!/bin/bash

. src/parser_fnc

PARSE_DEBUG=1

post_parser() {
	LOGGER_MSG="Total: ${SQLOBJ[TABLE_TOTAL]}"
	eval $LOGGER DEBUG1
}

dbg_parse() {
	if [ "$PARSE_DEBUG" == 1 ]; then
		echo "$1"
	fi
}

tokenize() {
	# Quebrar em tokens
	read -a TOKENS <<< $1

	dbg_parse "Total Tokens: ${#TOKENS[@]}"
}

# SET key=value
parse_set() {
	dbg_parse "Func: cmd_set"

	TKN="${TOKENS[1]}"
	if [ "${TKN}" == "" ]; then
		echo "Set command incomplete"
		return
	fi

	SQLOBJ[TYPE]="SET"

	# SET display_null="(null)"

	in_key=1
	in_sep=0
	in_val=0

	for pos in `${PRG_SEQ} 1 ${#TOKENS[@]}`; do
		TKN="${TOKENS[pos]}"
		NTKN="${TOKENS[pos+1]}"

		# Token without value
		if [ "${TKN}" == "" ]; then
			continue
		fi

		# Search for the key part
		if [ $in_key == 1 ]; then
			SQLOBJ[KEY]="$TKN"

			# Set that the next part should be the sep
			in_key=0
			in_sep=1
		fi

		if [ $in_sep == 1 ]; then
			if [ ! $TKN == "=" ]; then
				echo "The separator between key and value must be = signal"
				return 1
			fi

			# The next part should be the value
			in_sep=0
			in_val=1
		fi

		if [ $in_val == 1 ]; then
			SQLOBJ[VALUE]="$TKN"

			in_val=0
		fi
	done
}

# TRUNCATE [TABLE] tabela
parse_truncate() {
	dbg_prase "Func: cmd_truncate"

	for pos in `$PRG_SEQ 1 ${#TOKENS[@]}`; do
		TKN="${TOKENS[pos]}"
		NEXTTKN="${TOKENS[pos+1]}"

		if [ "${TKN}" == "" ]; then
			continue
		fi

		if [ "${TKN^^}" == "TABLE" ]; then
			continue
		fi
		echo " -- ${TKN}"

		SQLOBJ[TABLE_TOTAL]=1
		SQLOBJ[TABLE_1]="${TKN}"
	done
}

parse_table() {
	dbg_parse "Func: parse_table"

	tablen=0
	for pos in `$PRG_SEQ 1 ${#TOKENS[@]}`; do
		TKN="${TOKENS[pos]}"

		# For TABLE cmd the token[1] must be the table name
		if [ "${TOKENS[pos]}" == "" ]; then
			continue
		fi
		dbg_parse "$pos - |${TOKENS[pos]}|"

		parse_table_split "${TKN}" O_SCHEMA O_TABLE

		let tablen=$tablen+1

		SQLOBJ[TABLE_TOTAL]=$tablen
		SQLOBJ[TABLE_$tablen]="${O_TABLE}"
		SQLOBJ[TABLE_${tablen}_SCHEMA]="${O_SCHEMA}"
	done
}

parse_create() {
	dbg_parse "Func: cmd_create"

	TKN="${TOKENS[1]}"
	if [ "${TKN}" == "" ]; then
		echo "Comando create invalido"
		return
	fi

	# CREATE SCHEMA [name]
	if [ "${TKN^^}" == "SCHEMA" ]; then
		parse_create_schema 2
		return 0
	fi

	echo "Comando ${TKN} n찾o existe, ou n찾o programado ^^"
}

parse_create_schema() {
	pos=$1
	echo "input pos: $pos"
	number=0

	SQLOBJ[TYPE]="SCHEMA"

	# CREATE SCHEMA name;
	# CREATE SCHEMA name1, name2
	# CREATE SCHEMA nasd,asd;

	for pos in `${PRG_SEQ} $pos ${#TOKENS[@]}`; do
		TKN="${TOKENS[pos]}"
		if [ "$TKN" == "" ]; then
			continue
		fi

		echo "  | ${TOKENS[pos]}"
		NAME="${TOKENS[pos]}"

		# Remover , ou ;
		if [[ "${NAME: -1}" == "," ]] ||
		   [[ "${NAME: -1}" == ";" ]]; then
			NAME="${NAME:0: -1}"
		fi

		IFS=","
		NAMES=($NAME)
		unset IFS
		for name in ${NAMES[@]}; do
			let number=$number+1
			SQLOBJ[NAME_$number]=$name
		done

		SQLOBJ[NAME_$number]="$NAME"
	done 

	SQLOBJ[TOTAL]=$number
}

parse_delete() {
	dbg_parse "Func: cmd_delete"

	if [ ! "${TOKENS[1]^^}" == "FROM" ]; then
		dbg_parse "Delete mal-formando. Faltando clausula \"FROM\""
		exit
	fi

	grupo="t"
	tablen=0
	wheren=0
	for pos in `$PRG_SEQ 2 ${#TOKENS[@]}`; do
		TKN="${TOKENS[pos]}"
		NTKN="${TOKENS[pos+1]}"

		if [ "$skip" -gt 0 ]; then
			let skip=skip-1
			continue
		fi

		if [ "${TKN}" == "" ]; then
			continue
		fi

		if [ "${TKN^^}" == "WHERE" ]; then
			grupo="w"
			continue
		fi

		########
		# WHERE
		if [ "$grupo" == "w" ]; then
			T1="${TKN}"
			T2="${TOKENS[pos+1]}"
			T3="${TOKENS[pos+2]}"

			let wheren=$wheren+1
			SQLOBJ[WHERE_TOTAL]=$wheren
			SQLOBJ[WHERE_${wheren}_LEFT]="${T1}"
			SQLOBJ[WHERE_${wheren}_OPERATOR]="${T2}"
			SQLOBJ[WHERE_${wheren}_RIGHT]="${T3}"
			skip=3
			continue
		fi

		###########
		# TABLE
		if [ "$grupo" == "t" ]; then
			let tablen=$tablen+1

			SQLOBJ[TABLE_TOTAL]=$tablen
			SQLOBJ[TABLE_${tablen}]=${TKN}
		fi
	done
}

parse_select() {
	dbg_parse "Func: cmd_select"

	grupo="f"
	fieldn=0
	ordern=0
	groupn=0
	wheren=0
	tablen=0
	skip=0
	for pos in `$PRG_SEQ 1 ${#TOKENS[@]}`; do
		if [ "$skip" -gt 0 ]; then
			let skip=$skip-1
			#dbg_parse "  __ novo skip: $skip  ${TOKENS[$pos]}"
			continue
		fi

		TKN="${TOKENS[pos]}"
		NEXTTKN="${TOKENS[pos+1]}"

		dbg_parse "$pos - $grupo - $TKN - $NEXTTKN"

		if [ "${TKN}" == "" ]; then
			continue
		fi

		##################
		# ORDER BY
		if [ "${TKN^^}" == "ORDER" ]; then
			if [ ! "${NEXTTKN^^}" == "BY" ]; then
				dbg_parse "Sintaxe ORDER faltando BY"
				exit
			fi
			SQLOBJ[ORDER]=true
			grupo="o"
			continue
		fi
		if [ "$grupo" == "o" ]; then
			if [ "${TKN^^}" == "BY" ]; then
				continue
			fi

			let ordern=$ordern+1
			SQLOBJ[ORDER_$ordern]="${TKN}"
			SQLOBJ[ORDER_DIR_$ordern]="${NEXTTKN}"
			SQLOBJ[ORDER_TOTAL]=$ordern
			skip=1
		fi

		#################
		# GROUP BY
		if [ "${TKN^^}" == "GROUP" ]; then
			if [ ! "${NEXTTKN^^}" == "BY" ]; then
				dbg_parse "Sintaxe GROUP faltando BY"
				exit
			fi
			SQLOBJ[GROUP]=true
			grupo="g"
			continue
		fi
		if [ "$grupo" == "g" ]; then
			if [ "${TKN^^}" == "BY" ]; then
				continue
			fi

			let groupn=$groupn+1
			SQLOBJ[GROUP_$groupn]="${TKN}"
			SQLOBJ[GROUP_TOTAL]=$groupn
		fi

		#################
		# WHERE
		# FIELD OPERATOR VALUE
		if [ "${TKN^^}" == "WHERE" ]; then
			grupo="w"

			SQLOBJ[WHERE]=true
			continue
		fi

		if [ "$grupo" = "w" ]; then
			# TKN1 - Field
			# TKN2 - Operator
			# TKN3 - Value
			# TKN4 - Se for AND tem um novo filtro WHERE
			WTKN1=${TOKENS[pos]}
			WTKN2=${TOKENS[pos+1]}
			WTKN3=${TOKENS[pos+2]}
			WTKN4=${TOKENS[pos+3]}

			let wheren=$wheren+1
			SQLOBJ[WHERE_TOTAL]=$wheren

			SQLOBJ[WHERE_${wheren}_LEFT]="${WTKN1}"
			SQLOBJ[WHERE_${wheren}_OPERATOR]="${WTKN2}"
			SQLOBJ[WHERE_${wheren}_RIGHT]="${WTKN3}"

			if [ ! "${WTKN4^^}" == "AND" ]; then
				grupo=""
				continue
			fi

			skip=3
		fi

		#################
		# FIELDS
		if [ "$grupo" == "f" ]; then
			let fieldn=$fieldn+1
			SQLOBJ[FIELDS_TOTAL]="$fieldn"
			SQLOBJ[FIELDS_$fieldn]="${TKN}"

			if [ "${NEXTTKN^^}" == "FROM" ]; then
				grupo="fr"
				continue
			fi
			if [ "${NEXTTKN^^}" == "AS" ]; then
				ALIAS="${TOKENS[pos+2]}"
				F1="${TOKENS[pos+3]}"
				F2="${TOKENS[pos+4]}"

				SQLOBJ[FIELDS_${fieldn}_ALIAS]="${ALIAS}"
				skip=2
				if [ "${F1^^}" == "FROM" ]; then
					grupo="fr"
				fi
				continue
			fi
		fi

		################
		# FROM
		if [ "$grupo" == "fr" ]; then
			if [ ! "${TKN^^}" == "FROM" ]; then
				dbg_parse "SQL mal-formado. FROM n찾o encontrado"
			fi
			grupo="t"
			continue
		fi

		#######################
		# TABELA
		# table [alias]
		if [ "$grupo" == "t" ]; then
			let tablen=$tablen+1
			SQLOBJ[TABLE_TOTAL]="${tablen}"

			SQLOBJ[TABLE_$tablen]="${TKN}"

			# Verifica o pr처ximo Token
			case "${NEXTTKN^^}" in
				ORDER)
					group="o"; continue
					;;
				GROUP)
					group="g"; continue
					;;
				INNER|LEFT|RIGHT)
					group="j"; continue
					;;
				WHERE)
					continue
					;;
				*)
					SQLOBJ[TABLE_${tablen}_ALIAS]="${NEXTTKN}"
					skip=1
					grupo=""
					continue
			esac

			continue
		fi
	done
}

print_sqlobj() {
	echo ""
	echo "#############################"
	echo "Full SQL: ${SQLOBJ[ORIG]}"
	echo "COMMAND: ${SQLOBJ[CMD]}"


	if [ ! -z "${SQLOBJ[TYPE]}" ]; then
		echo "TYPE: ${SQLOBJ[TYPE]}"
	fi

	if [ ! -z "${SQLOBJ[TOTAL]}" ]; then
		echo "TOTAL: ${SQLOBJ[TOTAL]}"

		for pos in `${PRG_SEQ} 1 ${SQLOBJ[TOTAL]}`; do
			echo "${SQLOBJ[NAME_$pos]}"
		done
	fi

	if [ "${SQLOBJ[TYPE]^^}" == "SET" ]; then
		echo "Key: ${SQLOBJ[KEY]}"
		echo "Value: ${SQLOBJ[VALUE]}"
		return
	fi 

	if [ "${SQLOBJ[FIELDS_TOTAL]}" -gt 0 ]; then
		echo "FIELDS TOTAL: ${SQLOBJ[FIELDS_TOTAL]}"
		for i in `$PRG_SEQ 1 ${SQLOBJ[FIELDS_TOTAL]}`; do
			echo  "    FIELD_$i: ${SQLOBJ[FIELDS_${i}]}"
			echo  "    ALIAS_$i: ${SQLOBJ[FIELDS_${i}_ALIAS]}"
		done
	fi

	echo "TABELA TOTAL: ${SQLOBJ[TABLE_TOTAL]}"
	if [ "${SQLOBJ[TABLE_TOTAL]}" -gt 0 ]; then
		for i in `$PRG_SEQ 1 ${SQLOBJ[TABLE_TOTAL]}`; do
			echo "    TABLE: ${SQLOBJ[TABLE_$i]}"
			echo "   SCHEMA: ${SQLOBJ[TABLE_${i}_SCHEMA]}"
			echo "    ALIAS: ${SQLOBJ[TABLE_${i}_ALIAS]}"
		done
	fi

	echo "WHERE: ${SQLOBJ[WHERE]}"
	if [ "${SQLOBJ[WHERE_TOTAL]}" -gt 0 ]; then
		for i in `$PRG_SEQ 1 ${SQLOBJ[WHERE_TOTAL]}`; do
			echo "  WHERE # $wheren"
			echo "        LEFT: ${SQLOBJ[WHERE_${i}_LEFT]}"
			echo "        OPER: ${SQLOBJ[WHERE_${i}_OPERATOR]}"
			echo "       RIGHT: ${SQLOBJ[WHERE_${i}_RIGHT]}"
		done
	fi

	echo "ORDER: ${SQLOBJ[ORDER]}"
	if [ "${SQLOBJ[ORDER]}" == "true" ]; then
		echo "   TOTAL: ${SQLOBJ[ORDER_TOTAL]}"
		for i in `$PRG_SEQ 1 ${SQLOBJ[ORDER_TOTAL]}`; do
			echo  "      FIELD_$i: ${SQLOBJ[ORDER_${i}]}"
			echo  "  FIELD_DIR_$i: ${SQLOBJ[ORDER_DIR_${i}]}"
		done
	fi

	echo "GROUP: ${SQLOBJ[GROUP]}"
	if [ "${SQLOBJ[GROUP]}" == "true" ]; then
		echo "   TOTAL: ${SQLOBJ[GROUP_TOTAL]}"
		for i in `$PRG_SEQ 1 ${SQLOBJ[GROUP_TOTAL]}`; do
			echo "   GROUP_$i: ${SQLOBJ[GROUP_${i}]}"
		done
	fi
}

parser() {
	SQLOBJ[ORDER]=false
	SQLOBJ[GROUP]=false
	SQLOBJ[WHERE]=false
	SQLOBJ[FIELDS_TOTAL]=0
	SQLOBJ[WHERE_TOTAL]=0
	SQLOBJ[TABLE_TOTAL]=0

	dbg_parse "###### PARSER"
	dbg_parse "## |$1|"
	tokenize "$1"

	# Which SQL Command it is?
	SQLOBJ[ORIG]="$1"
	SQLOBJ[CMD]="${TOKENS[0]^^}"	

	case "${TOKENS[0]^^}" in
		## Set commands, special commands
		SET)
			parse_set
			;;
		TABLE)
			parse_table
			;;
		SELECT)
			parse_select
			;;
		TRUNCATE)
			parse_truncate
			;;
		DELETE)
			parse_delete
			;;
		CREATE)
			parse_create
			;;
		*)
			LOGGER_MSG="Command |${TOKENS[0]}| not found"
			eval $LOGGER ERROR
			return 1
	esac

	print_sqlobj
	return 0
}


#parser "select 1=1"
#parser "TABLE tabela1"
#parser  "  SELECT * FROM tabela2"
#parser "select field1, field2, field3 from tabela3 order by field1 desc"
#parser "select field1, field2, field3 from tabela3 tab order by field1 desc"
#parser "select field1, field2, field3 from tabela3 order by field1 desc, field2 asc"
#parser "select id, count(*) from tabela1 group by 1"
#parser "sel tabela1" # Wrong
#parser "select * from tabela where field1 = 'asd'";
#parser "select * from tabela where field1 = '1' and field2 = 'asd'";
#parser "select * from tabela where field1 >= '1' and field2 = 'asd' and asd = true";
#parser "select al.valor from table al"
#parser "truncate tabela1"
#parser "select field, from tab" # Wrong
#parser "select field as campo from tabela ca where ca.field = 1"
#parser "delete from tabela"
#parser "delete tabela"
#parser "delete from tabela where 1 = 1"
#parser "table bashbd.schemas"
#parser "create schema asd;"
#parser "create schema schema1, schema2"
