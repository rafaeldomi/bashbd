#!/bin/bash

: <<'FUNCTION'
Description: Return the schema record, searching by name
Parameters:
  $1 - Input variable that has the name
FUNCTION
schema_get_struct_by_name() {
	# SS = Schema Struct
	declare -n _SS=$1
	local _IV # IntegerValue
	local SCHEMA

	# Field must exists
	if [ -z ${_SS[schema]} ]; then
		eval $LOGGER ERROR "No schema field found in SchemaStruct"
		return 1
	fi

	LOGGER_MSG="Search for schema: ${_SS[schema]}"
	eval $LOGGER DEBUG

	declare -A DATA
	DATA[file]=$CTABLE_SCHEMAS
	init_file DATA

	# declare -p DATA

  # [ scan ]
	# field to search = 2 = schema_name
	simple_scan DATA SCHEMA true 2 "${_SS[schema]}"
	eval $M_CHECK_RES

  hex_to_int _IV ${SCHEMA[0]}
	SS[id]=$_IV
	SS[position]="${REC[REC_POS]}"

	return 0
}

: <<'FUNCTION'
Description: Get schema id by name
Parameters:
  $1 - Return variable
	$2 - Schema name
FUNCTION
schema_get_id() {
	local _RET=$1
	local _SCHEMANAME="$2"
	local _IV	# IntegerValue

	declare -A DATA
	DATA[file]=$CTABLE_SCHEMAS
	init_file DATA

	# [ scan ]
	# field to search = 2 = schema_name
	simple_scan DATA SCHEMA true 2 "$_SCHEMANAME"
	eval $M_CHECK_RES

	hex_to_int _IV "${SCHEMA[0,2]}"
	eval $_RET="$_IV"

	LOGGER_MSG="Found schema: $_RET"
	eval $LOGGER DEBUG

	return 0
}
