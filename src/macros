#!/bin/bash

# Its not really macros

: <<'COMMENT'
This file contains c-macro-like
COMMENT

# Some definitions (Like c macros)
#  prefix those "like c-macros" with M for Macro
M_ASSERT="_assert \${FUNCNAME[0]} \${LINENO}"
M_CHECK_RES='RES=$?; if [ $RES -ne 0 ]; then return $RES; fi'

LOGGER="log \${FUNCNAME[0]} \${LINENO}"

# Getting objects
# set P_SCHEMA to use this
#  [ md_schema.schema_get_struct_by_name ]
M_GET_SCHEMA='
  declare -A SS;
  declare -A SCHEMA_RECORD;
  SS[schema]="$P_SCHEMA";
  if ! schema_get_struct_by_name SS SCHEMA_RECORD; then
    LOGGER_MSG="Schema "$P_SCHEMA" not found";
    eval $LOGGER ERROR;
    return 1;
  fi'

# set P_TABLE
# [ md_table.table_get_struct_by_name ]
M_GET_TABLE='
  declare -A TS;
  declare -A TABLE_RECORD;
  TS[table]="$P_TABLE";
  if ! table_get_struct_by_name TS TABLE_RECORD; then
    LOGGER_MSG="Table "$P_TABLE" not found";
    eval $LOGGER ERROR;
    return 1;
  fi'

M_GET_FUNCTION='
  declare -A FS;
  declare -A FUNCTION_RECORD;
  FS[function]="$P_FUNCTION";
  if ! function_get_struct_by_name FS FUNCTION_RECORD; then
    LOGGER_MSG="Function "$P_FUNCTION" not found";
    eval $LOGGER ERROR;
    return 1;
  fi'

M_GET_SEQUENCE='
  declare -A SS;
  declare -A SEQUENCE_RECORD;
  SS[sequence]="$P_SEQUENCE";
  if ! sequence_get_struct_by_name SS SEQUENCE_RECORD; then
    LOGGER_MSG="Sequence "$P_SEQUENCE" not found";
    eval $LOGGER ERROR;
    return 1;
  fi'