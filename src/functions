#!/bin/bash

: <<'COMMENT'
This file contains functions that doesn't fit in others files
COMMENT

# Some definitions (Like c macros)
ASSERT="_assert \${FUNCNAME[0]} \${LINENO}"

: <<'FUNCTION'
Description: Finish program
Parameters:
  $1 - The exit desired exit code
FUNCTION
finish() {
	eval $LOGGER LOG "Sucesfully finished!"
	exit $1
}

: <<'FUNCTION'
Description: Repeat char
Parameters:
  $1 - Output
  $2 - Char
  $3 - Repeat count
  $4 - Choose version of this function, default is the latest
FUNCTION
repeat() {
	local _VERSION=${4:-2}
	local _RET=$1
	local _VALUE=""
	local _TOTAL=$3

	if [ "$_VERSION" -eq 2 ]; then
		A=$(${PRG_PRINTF} "%${_TOTAL}s")
		_VALUE=$(${PRG_ECHO} -e "${A// /${2}}")
	else
		while [ $((total--)) -ge 0 ]; do
			_VALUE="${_VALUE}$2"
		done
	fi

	eval $_RET="${_VALUE}"
}

: <<'FUNCTION'
Description: Trim String
Parameters:
  $1 - Output
  $2 - String to trim either left and right
FUNCTION
trim() {
	local _RET=$1
	#local _VALUE="$2" #$($PRG_ECHO $2)
	local _VALUE=$($PRG_ECHO $2)
	eval $_RET="${_VALUE}"
}

: <<'FUNCTION'
Description: Main program help menu
FUNCTION
show_help() {
	writeln "Program help"
	writeln " -h         Show this help"
	writeln " -c [conf]  Set a configuration file"
	writeln "            Default = bd.conf"
	writeln " -d [dir]   Set the database directory"
	writeln " -b [dir]   Initialize a new data structure directory"
	writeln " -s         Start with strace"

	finish 0
}

: <<'FUNCTION'
Description: Ask client for some input
	Returns when:
	  - There is ';' in the string
	  - Begins with '\'
	  - Exactly 'help' or 'exit'
FUNCTION
ask_for_input() {
	local TMP=""
	INPUT_CMD=""

  # Configure history
	# [ functions ]
	prepare_history

	while [ true ]; do
		read -r -e -p "bashbd> " TMP

		# if the return code is 1, means that (probably) got a CTRL+D
		#   so, finish the program
		RES=$?
		if [ $RES == 1 ]; then
			echo
			finish 0
		fi
		INPUT_CMD="$INPUT_CMD$TMP"

		if [ "${TMP:0:1}" == "\\" ] ||
		   [ "${TMP^^}" == "HELP" ] ||
		   [ "${TMP^^}" == "EXIT" ]; then
			break
		fi

		if [[ "${TMP}" =~ ";" ]]; then
			break
		fi

		INPUT_CMD="$INPUT_CMD "
	done

	echo "$INPUT_CMD" >> $HISTORY_FILE
}

: <<'FUNCTION'
Description: Prepare bash for using history file in read command
FUNCTION
prepare_history() {
	# [ const.HISTORY_FILE ]
	export HISTFILE=$HISTORY_FILE
	export HISTSIZE=1000  # How many commands will be recorded in history file
	export HISTFILESIZE=2000  # Maximum file size

	# Disable global history
	# Check signals.signal_trap for history restore (set -o history)
	set +o history

	# Load the historyFile
	if [ -f "$HISTFILE" ]; then
		history -r "$HISTFILE"
	fi
}

# $1 - variable
# $2 - size
# $3 - value
append_fmt_string() {
	#local _STR=$1
	#RES=`printf "$1%$2s" "$3"`
	#eval $_STR=$RES
	
	STR=`printf "$STR%$2s" "$3"`
	NS=+$2
}

: <<'FUNCTION'
Description: Initialize an empty row
FUNCTION
init_empty_row() {
	local _STR=$1
	eval $_STR=""
}

: <<'FUNCTION'
Description: Append a row to file
Parameters:
  $1 - value
  $2 - filename
  $3 - position
FUNCTION
append_row_simple() {
	check_file $2

	echo -n "$1" | $PRG_DD of=$2 seek=$3 conv=notrunc status=none
}

: <<'FUNCTION'
Description: Check if the file, in $1, is valid and is owned by us
Parameters:
  $1 - Filename
FUNCTION
check_file() {
	# Does file exists?
	if [ ! -f $1 ]; then
		eval $LOGGER ERROR "File does not exists: $1"
		return -1
	fi

	# Does file is owned by bashbd?
	# This prevent that we change things that should not be touched
	USR=`stat -c %U $1`
	if [ $USR != "bashbd" ]; then
		eval $LOGGER ERROR "File is not owned by bashbd user"
		return -1
	fi

	return 0
}

: <<'FUNCTION'
Description: Assert ^^
Parameters:
  $1 - Condition
	$2 - File
	$3 - Line
FUNCTION
_assert() {
	local INPUT="$3"
	local CDT="${!3}"

	if [ ! "${CDT}" ]; then
		LOGGER_MSG="Assert Failed. Condition: $CDT .. in Line: $1:$2"
		eval $LOGGER FATAL
	fi
}

: <<'FUNCTION'
Description: Check if the function is running inside bashbd program
FUNCTION
is_bashbd() {
	local PRG=`basename $0`
	LOGGER_MSG="Programa: $PRG"
	eval $LOGGER LOG

	[ "$PROGRAM" == "$PRG" ]
	return $?
}

: <<'FUNCTION'
Description: Check if $1 is a dir and his a data directory for bashbd
Parameters:
  $1 - DIR
FUNCTION
check_data_dir() {
	# Directory exists?
	if [ ! -d $DBDATA ]; then
		eval $LOGGER FATAL "Could not find data structure"
	fi

	# Is a directory stampped by bashbd?
	if [ ! -f $DBDATA/$STAMP_FILE ]; then
		eval $LOGGER FATAL "This directory is not a bashbd dir"
	fi
}

: <<'FUNCTION'
Description: search for binaries
FUNCTION
find_binaries() {
	# List the commands to find the binaries
	# These commands are built-in to bash, dont need to search:
	#  |  mapfile  |  let  |  shift    | eval
	#  |  local    | read  |  command 
	local PRGS=(cut dd seq printf echo stat basename bash wc awk sed column \
				cat rm xxd head date unlink sort tr)

	for cmd in "${PRGS[@]}"; do
		local cmdpath=`which ${cmd}`
		#local cmdpath=`command -v ${cmd}`

		# Check if its Okay
		RES=$?
		if [ ! "$RES" == 0 ]; then
			# [ log ]
			eval $LOGGER FATAL "Program ${cmd} not found"
		fi

		# Declare variable
		readonly PRG_${cmd^^}="${cmdpath}"

		LOGGER_MSG="Found ${cmd} in ${cmdpath}"
		eval $LOGGER DEBUG2
	done
}

removeEmptyLines() {
    local -r content="${1}"
    $PRG_ECHO -e "${content}" | ${PRG_SED} '/^\s*$/d'
}

repeatString() {
    local -r string="${1}"
    local -r numberToRepeat="${2}"

    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
    then
        local -r result="$(${PRG_PRINTF} "%${numberToRepeat}s")"
        $PRG_ECHO -e "${result// /${string}}"
    fi
}

isEmptyString() {
    local -r string="${1}"

    if [[ "$(trimString "${string}")" = '' ]]
    then
        $PRG_ECHO 'true' && return 0
    fi

    $PRG_ECHO 'false' && return 1
}

trimString() {
    local -r string="${1}"

    $PRG_SED 's,^[[:blank:]]*,,' <<< "${string}" | $PRG_SED 's,[[:blank:]]*$,,'
}

: <<'FUNCTION'
Description: Convert a integer to his hex representation
Parameters:
  $1 - Output
  $2 - Format bytes
  $3 - Input Integer
FUNCTION
int_to_hex() {
	local _RET=$1
	local sizebytes=$2
	local int="$3"
	local value=""

	value=$(${PRG_PRINTF:-printf} "%0$2x" "$int")
	eval $_RET="$value"
}

: <<'FUNCTION'
Description: Convert Hexdecimal value to its integer representation
Parameters:
  $1 - Return variable
	$2 - Input
FUNCTION
hex_to_int() {
	local _RET=$1
	local input=$2
	local value=""

	value=$((0x$input))
	eval $_RET="$value"

	return 0

	#value=$(${PRG_PRINTF} "%d" "0x$input")
	#RES=$?

	#eval $_RET="$value"
	#return $RES
}

: <<'FUNCTION'
Description: Check function is declared
Parameters:
  $1 - Function name
FUNCTION
fn_exist() {
	declare -F "$1" > /dev/null
	return $?
}

report_finish() {
	# Simple for now, just echo the CMD inside the TOKENS, similar the postgres way
	echo "${TOKENS[CMD]}"
}

: <<'FUNCTION'
Description: Sort an array
Parameters:
  $1 - Output variable
	$2 - Input array
FUNCTION
sort_array() {
	local _RET=$1
	local INPUT=$2

	# TODO
}