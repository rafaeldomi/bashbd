#!/bin/bash

: <<'COMMENT'
Description of ROW Vector:
	ROWS      => Total row number in the vector
	FIELDS    => Total fields number in the row
	FIELDS_n  => The type of the attributes
    n,VALUE_y => The number of the row, and the values of its attibutes
COMMENT

: <<'FUNCTION'
Description: Add value to the ROW variable
$n - The values
FUNCTION
bootstrap_add_value() {
	# Load all the parameters in VALUE var
	local VALUES=("$@")

	# Initialize counter
	local fn=0

	# Increment the number of rows
	let ROW[ROWS]++

	# Number of this ROW
	rown=${ROW[ROWS]}

	# Loop through all the parameters
	for pos in `$PRG_SEQ 1 ${#VALUES[@]}`; do
		# One more field/attribute
		let fn=$fn+1

		# The matrix format is [ROW,FIELD]=ATTR_NAME
		ROW[$rown,VALUE_$fn]="${VALUES[pos-1]}"
	done
}

# Add a array pre-filled with data to the global ROW variable
# $1 - The array
# Example:
#  VARIABLE_EXAMPLE=(1 value1)
#  row_init int 20
#  row_add_value ${VARIABLE_EXAMPLE[@]}
row_add_value() {
	VALUES=("$@")

	fn=0

	# Now we have one more row
	let ROW[ROWS]=${ROW[ROWS]}+1
	rown=${ROW[ROWS]}

	# This loop puts the value that is in the original array-variable
	#  on our ROW variable style
	for pos in `$PRG_SEQ 1 ${#VALUES[@]}`; do
		# One more field/attribute
		let fn=$fn+1

		ROW[$rown,VALUE_$fn]="${VALUES[pos-1]}"
	done
}

: <<'FUNCTION'
Description: Convert a decimal value to his hex representation
FUNCTION
dec_to_hex() {
	local _RET=$1

	echo $2

	VALOR=`printf "%08X" $2`

	eval $_RET=$VALOR
}


: <<'FUNCTION'
Description: Mark our DIR as a data directory used by bashdb
 Must be called just by bootstrap function
FUNCTION
bootstrap_stamp_dir() {
	touch $STAMP_FILE
}

: <<'FUNCTION'
Description: Do the bootstrap of a data dir
FUNCTION
bootstrap() {
	# Am I running through bashdb program?
	is_bashdb
	RES=$?
	if [ "$RES" == "1" ]; then
		echo "This must be run through bd program. Exiting"
		exit 1
	fi

	if [ -d $1 ]; then
		eval $LOGGER FATAL "Folder already exists. Exiting"
	fi

	mkdir $1 && cd $1

	## Create temp folder
	mkdir temp

	##############################
	## Table: schemas
	# id   = integer
	# name = 200
	storage_create_file "TABLE" ${CTABLE_SCHEMAS}

	unset ROW
	declare -A ROW

	row_init int 200

	bootstrap_add_value 1 bashdb
	bootstrap_add_value 2 public

	row_append_simple ${CTABLE_SCHEMAS}

	eval $LOGGER LOG "Table schemas: OK"


	############################
	## Table: language
	##  id	    int
	##  name    200
	##  handler 200
	storage_create_file "TABLE" ${CTABLE_LANG}

	unset ROW
	declare -A ROW

	row_init int 200 200

	bootstrap_add_value 1 builtin ${MGC_NULL}

	row_append_simple ${CTABLE_LANG}

	eval $LOGGER LOG "Table language OK"

	############################
	## Table: Types
	## id				int
	## name			varchar(200)
	## fnc_in   varchar(200)
	## fnc_out	varchar(200)
	## size			int
	storage_create_file "TABLE" ${CTABLE_TYPES}

	unset ROW
	declare -A ROW

	row_init int 200 200 200 int

	bootstrap_add_value 1 int  bashdb.fnc_in_int 	bashdb.fnc_out_int	4
	bootstrap_add_value 2 char ${MGC_NULL} 			 	${MGC_NULL} 				-1
	bootstrap_add_value 3 bool ${MGC_NULL} 			 	${MGC_NULL} 				1
	bootstrap_add_value 4 text ${MGC_NULL} 			 	${MGC_NULL} 				-1
  bootstrap_add_value 5 json bashdb.fnc_in_json	bashdb.fnc_out_json	-1

	row_append_simple ${CTABLE_TYPES}

	eval $LOGGER LOG "Table types OK"

	#############################
	## Table: tables
	## id					int
	## name				200
	## schema_id	int
	storage_create_file "TABLE" ${CTABLE_TABLES}

	unset ROW
	declare -A ROW

	row_init int 200 int

	bootstrap_add_value $CTABLE_SCHEMAS schemas 1
	bootstrap_add_value $CTABLE_TABLES tables 1
	bootstrap_add_value $CTABLE_ATTRS attrs 1
	bootstrap_add_value $CTABLE_TYPES types 1
	bootstrap_add_value $CTABLE_FUNCTIONS functions 1
	bootstrap_add_value $CTABLE_INDEX indexes 1
	bootstrap_add_value $CTABLE_LANG languages 1
	bootstrap_add_value $CTABLE_SEQUENCE sequences 1
	bootstrap_add_value $CTABLE_COMMENTS comments 1
	bootstrap_add_value $CTABLE_VIEWS views 1
	# bootstrap_add_value 10 teste 2

	row_append_simple ${CTABLE_TABLES}

	eval $LOGGER LOG "Table tables OK"

	###########################
	## Table: functions
	## id					int
	## schema_id  int
	## name				200
	## handler		200
	## lang_id		int
	storage_create_file "TABLE" ${CTABLE_FUNCTIONS}

	unset ROW
	declare -A ROW

	row_init int int 200 200 int text

	local function_id=1

	bootstrap_add_value $((function_id++)) -1 sum 			bashdb.sum 				1
	bootstrap_add_value $((function_id++)) -1 coalesce	bashdb.coalesce 	1
	bootstrap_add_value $((function_id++)) -1 max 			bashdb.max 				1
	bootstrap_add_value $((function_id++)) -1 min 			bashdb.min 				1
	bootstrap_add_value $((function_id++)) -1 count 		bashdb.count 			1
	bootstrap_add_value $((function_id++)) -1 avg 			bashdb.avg 				1
	bootstrap_add_value $((function_id++)) -1 nextval 	bashdb.nextval 		1
	bootstrap_add_value $((function_id++)) -1 currval 	bashdb.currval 		1
	bootstrap_add_value $((function_id++)) -1 hash 			bashdb.hash		 		1

	row_append_simple ${CTABLE_FUNCTIONS}

	eval $LOGGER LOG "Table functions OK"

	##########################
	## Table index
	## id 			int
	## table_id	int
	## fields		200
	storage_create_file "TABLE" ${CTABLE_INDEX}

	eval $LOGGER LOG "Table index OK"

	##########################
	## Table Attrs
	## id				int
	## table_id	int
	## name			200
	## types_id	int
	## size			int
	## default	200
	## null			int
	## unique   boolean
	storage_create_file "TABLE" ${CTABLE_ATTRS}

	# Types
	# 1 - integer
	# 2 - varchar
	# 3 - char
	unset ROW
	declare -A ROW

	# id - table_id - name - types_id - size - default - null - unique
	row_init int int 200 int int 200 bool bool

	local attr_id=1

	# Relation schemas
	bootstrap_add_value $((attr_id++)) ${CTABLE_SCHEMAS} id 		1 -1 	"sequence:4" 	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_SCHEMAS} name 	2 200 ${MGC_NULL} 	0 true

	# Relation Languages
	bootstrap_add_value $((attr_id++)) ${CTABLE_LANG} id 			1 -1 	"sequence:2" 	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_LANG} name 		2 200 ${MGC_NULL} 	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_LANG} handler 2 200 ${MGC_NULL} 	0 false

	# Relation Types
	bootstrap_add_value $((attr_id++)) ${CTABLE_TYPES} id 			1 -1 	"sequence:3" 	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_TYPES} name 		2 200 ${MGC_NULL}	 	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_TYPES} fnc_in 	2 200 ${MGC_NULL} 	0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_TYPES} fnc_out 	2 200 ${MGC_NULL} 	0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_TYPES} size 		1 -1 	${MGC_NULL} 	0 false

	# Relation Table
	bootstrap_add_value $((attr_id++)) ${CTABLE_TABLES} id		 			1	-1	"sequence:5" 	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_TABLES} name				2	200 "" 			 			0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_TABLES} schema_id 	1 -1 	"" 			 			0 false

	# Relation Attrs
	bootstrap_add_value $((attr_id++)) ${CTABLE_ATTRS} id				1  -1 	"sequence:8" 	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_ATTRS} table_id 1  -1 	"" 						0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_ATTRS} name 		2  200 	"" 						0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_ATTRS} types_id 1  -1 	"" 						0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_ATTRS} size 		1  -1 	"" 						1 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_ATTRS} default 	2  200 	${MGC_NULL} 	1 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_ATTRS} null 		1  -1 	${MGC_NULL} 	0 false

	# Relation functions
	bootstrap_add_value $((attr_id++)) ${CTABLE_FUNCTIONS} id 					1 -1 	"sequence:6" 0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_FUNCTIONS} schema_id		1 -1 	${MGC_NULL}  0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_FUNCTIONS} name 				2 200 ${MGC_NULL}  0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_FUNCTIONS} handler	 		2 200 ${MGC_NULL}  0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_FUNCTIONS} lang_id	 		2 -1  ${MGC_NULL}  0 false

	# Relation index
	bootstrap_add_value $((attr_id++)) ${CTABLE_INDEX} id 		1 -1 "sequence:7" 0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_INDEX} name 	2 200 "" 					0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_INDEX} fields 2 200 "" 					0 false

	# Relation sequence
	bootstrap_add_value $((attr_id++)) ${CTABLE_SEQUENCE} id 		 			1 -1 	"sequence:1"	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_SEQUENCE} schema_id  	1 -1 	"" 			 			0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_SEQUENCE} name 		 		2 200	"" 			 			0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_SEQUENCE} last_value 	1 -1 	"" 			 			0 false

	# Relation comments
	bootstrap_add_value $((attr_id++)) ${CTABLE_COMMENTS} id				1 -1 	"sequence:9"	0 true
	bootstrap_add_value $((attr_id++)) ${CTABLE_COMMENTS} type_id		1 -1 	""						0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_COMMENTS} object_id	1 -1 	""						0 false
	bootstrap_add_value $((attr_id++)) ${CTABLE_COMMENTS} comment		2 200 ""						0 false

	# [ storage ]
	row_append_simple ${CTABLE_ATTRS}

	eval $LOGGER LOG "Table attrs OK"

	#############
	## Table comments
	## id					int
	## type_id		int
	## object_id	int
	## comment		varchar(200)
	#############
  local comment_id=1

	storage_create_file "TABLE" ${CTABLE_COMMENTS}

	unset ROW
	declare -A ROW

	row_init int int int 200

  bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_SCHEMAS "Schema metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_FUNCTIONS "Functions metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_ATTRS "Attributes metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_COMMENTS "Comments metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_INDEX "Index metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_LANG "Language metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_SEQUENCE "Sequence metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_TABLES "Table metadata table"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_TABLE $CTABLE_TYPES "Types metadata table"

	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_SCHEMA 1 "this schema holds metadata info"
	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_SCHEMA 2 "public schema"

	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_FUNCTION 1 "function to sum"

	bootstrap_add_value $((comment_id++)) $COMMENT_TYPE_SEQUENCE 1 "sequence for sequence table"

	# [ storage ]
	row_append_simple ${CTABLE_COMMENTS}

	eval $LOGGER LOG "Table comments OK"

	##############################
	## Table: sequences
	# id   		 		integer
	# schema_id  	integer
	# name		 		200
	# last_value	integer
	storage_create_file "TABLE" ${CTABLE_SEQUENCE}

	unset ROW
	declare -A ROW

	row_init int int 200 int

	bootstrap_add_value 1 1 sq_sequence 2
	bootstrap_add_value 2 1 sq_language 1
	bootstrap_add_value 3 1 sq_types 2
	bootstrap_add_value 4 1 sq_schemas 2
	bootstrap_add_value 5 1 sq_table 8
	bootstrap_add_value 6 1 sq_functions 8
	bootstrap_add_value 7 1 sq_index 0
	bootstrap_add_value 8 1 sq_attrs    $attr_id
	bootstrap_add_value 9 1 sq_comments $comment_id

	# [ storage ]
	row_append_simple ${CTABLE_SEQUENCE}

	eval $LOGGER LOG "Table sequences: OK"

	##############################
	## Table: views
	# id   		 		integer
	# schema_id		integer
	# definition	text
	storage_create_file "TABLE" ${CTABLE_VIEWS}

	unset ROW
	declare -A ROW

	row_init int int text

	# [ storage ]
	row_append_simple ${CTABLE_VIEWS}

	eval $LOGGER LOG "Table views: OK"

	######
	## Table testes
	## id 		int
	## uuid		36
	## number	int
	# storage_create_file "TABLE" 10
	# unset ROW
	# declare -A ROW
	# row_init int 36 int

	# local uis=36

	# for i in {1..50}; do
	# 	local i=$RANDOM
	# 	if [ ${uis} == 36 ]; then
	# 		uis=1
	# 		local uuid=$(uuidgen)
	# 	fi
	# 	let uis++

	# 	bootstrap_add_value $i ${uuid:0:$uis} $i
	# done

	# row_append_simple 10

	# eval $LOGGER LOG "Table teste OK"

	bootstrap_stamp_dir
}
