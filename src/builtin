#!/bin/bash

: <<'COMMENT'
# $1 - The return value
# $2..n - The input values

All the functions should have a return code:
 0 - OK Sucess
 1 - Fault

Optionally, the functions can set a error message in the MSGERROR variable

bashdb.nextval
bashdb.currval
bashdb.sum
bashdb.coalesce
bashdb.max
bashdb.min
bashdb.count
bashdb.avg
bashdb.order
COMMENT

bashdb.capitalize() {
	local _RET=$1
	eval $_RET="${2@u}"
	return 0
}

bashdb.tolower() {
	local _RET=$1
	eval $_RET="${2@L}"
}

bashdb.toupper() {
	local _RET=$1
	eval $_RET="${2@U}"
	return 0
}

# Get next value of a sequence
bashdb.nextval() {
	:
}

# Get the actual value of a sequence
bashdb.currval() {
	:
}

# Sum of values
bashdb.sum() {
	local _RET=$1
	VALUE=0
	shift
	while [ ! -z $1 ]; do
		let VALUE=$VALUE+$1
		shift
	done

	eval $_RET=$VALUE
	return 0
}

# Return the first not-null value
# COALESCE
bashdb.coalesce() {
	local _RET=$1
	shift
	VALUE="$1"
	while [ "$1" == "0x0" ]; do
		shift
		VALUE="$1"
	done
	eval $_RET="$VALUE"
	return 0
}

# Return the maximum value in the array
# MAX
bashdb.max() {
	local _RET=$1
	shift
	VALUE="$1"
	shift
	while [ ! -z $1 ]; do
		if [ "$1" -gt "$VALUE" ]; then
			VALUE=$1
		fi
		shift
	done
	eval $_RET="$VALUE"
	return 0
}

# Return the minimum value in the array
# MIN
bashdb.min() {
	local _RET=$1
	shift
	VALUE="$1"
	shift
	while [ ! -z $1 ]; do
		if [ "$1" -lt "$VALUE" ]; then
			VALUE=$1
		fi
		shift
	done
	eval $_RET="$VALUE"
	return 0
}

# Count how many values exists in the array
# Count
bashdb.count() {
	local _RET=$1
	VALUE=${#}
	let VALUE=$VALUE-1	

	eval $_RET="$VALUE"
	return 0
}

: <<'FUNCTION'
Description: Average function for avg SQL function
Parameters:
  $1 - Array with values
FUNCTION
bashdb.avg() {
	local _RET=$1
	local TOTN=0
	local TOTV=0

	shift
	TOTN=${#}

	TOTV=0
	while [ ! -z $1 ]; do
		let TOTV=$TOTV+$1
		shift
	done

	let VALUE=$TOTV/$TOTN
	eval $_RET=$VALUE
	return 0
}

# Order
bashdb.order() {
	:
}
