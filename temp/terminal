#!/bin/bash

set_col() {
	TER_COL=("${@}")
}

add_row() {
	mapfile -t -O 1 -d `echo -en "\x1D"` ter_fld <<<$(echo "$@")

	FLDN=0
	for a in "${ter_fld[@]}"; do

		# Like a trim
		v=$(echo $a)

		idx="${ROWN}${FLDN}"
		TER_ROWS[$idx]="$v"

		len="${#v}"

		#echo "Value |$v| Size ${#v}"
		#echo "Size Atual: ${TER_COL_S[FLDN]}"

		if [ -z "${TER_COL_S[$FLDN]}" ]; then
			TER_COL_S[$FLDN]="$len"
		else
			if [ "$len" -gt "${TER_COL_S[$FLDN]}" ]; then
				TER_COL_S[$FLDN]="$len"
			fi
		fi

		let FLDN++
	done
	let ROWN++
}

: <<'COMMENT'
 id | schema
----+--------
  1 | public
  2 | bashbd
(2 rows)
COMMENT
print_table() {
	#for i in `seq 1 ${#TER_COL[@]}`; do
	#	echo "  - ${TER_COL[$i-1]} => ${TER_COL_S[$i-1]}"
	#done

	# Check what is greater, the col name or the size that we already have
	for i in `seq 1 ${#TER_COL[@]}`; do
		SZ=${TER_COL_S[$i-1]}
		LEN=${#TER_COL[i-1]}

		if [ $LEN -gt $SZ ]; then
			TER_COL_S[$i-1]=$LEN
		fi
	done

	

}

init_output() {
	unset TER_COL
	unset TER_ROWS

	declare -a TER_COL
	declare -a TER_COL_S
	declare -a TER_ROWS

	ROWN=0
}

set_col id schema

mapfile -t -s 1 -O 1 -d `echo -en "\x1E"` rows < ../data/1
for row in "${rows[@]}"; do
	add_row "$row"
done

print_table

#declare -p TER_COL
#echo "Total col: ${#TER_COL[@]}"
#echo "First: ${TER_COL[0]}"
#echo "Last: ${TER_COL[@]: -1}"
#echo "Second and ahead: ${TER_COL[@]: 1}"
#echo "${TER_COL[2]}"
