#!/bin/bash

. storage

: <<'COMMENT'
Description of ROW Vector:
	ROWS      => Total row number in the vector
	FIELDS    => Total fields number in the row
	FIELDS_n  => The type of the attributes
    n,VALUE_y => The number of the row, and the values of its attibutes
COMMENT

: <<'FUNCTION'
Description: Add value to the ROW variable
$n - The values
FUNCTION
bootstrap_add_value() {
	# Load all the parameters in VALUE var
	local VALUES=("$@")

	# Initialize counter
	local fn=0

	# Increment the number of rows
	let ROW[ROWS]++

	# Number of this ROW
	rown=${ROW[ROWS]}

	# Loop through all the parameters
	for pos in `$PRG_SEQ 1 ${#VALUES[@]}`; do
		# One more field/attribute
		let fn=$fn+1

		# The matrix format is [ROW,FIELD]=ATTR_NAME
		ROW[$rown,VALUE_$fn]="${VALUES[pos-1]}"
	done
}


# Add a array pre-filled with data to the global ROW variable
# $1 - The array
# Example:
#  VARIABLE_EXAMPLE=(1 value1)
#  row_init int 20
#  row_add_value ${VARIABLE_EXAMPLE[@]}
row_add_value() {
	VALUES=("$@")

	fn=0

	# Now we have one more row
	let ROW[ROWS]=${ROW[ROWS]}+1
	rown=${ROW[ROWS]}

	# This loop puts the value that is in the original array-variable
	#  on our ROW variable style
	for pos in `$PRG_SEQ 1 ${#VALUES[@]}`; do
		# One more field/attribute
		let fn=$fn+1

		ROW[$rown,VALUE_$fn]="${VALUES[pos-1]}"
	done
}

: <<'FUNCTION'
Description: Convert a decimal value to his hex representation
FUNCTION
dec_to_hex() {
	local _RET=$1

	echo $2

	VALOR=`printf "%08X" $2`

	eval $_RET=$VALOR
}


: <<'FUNCTION'
Description: Mark our DIR as a data directory used by bashbd
 Must be called just by bootstrap function
FUNCTION
bootstrap_stamp_dir() {
	touch $STAMP_FILE
}

: <<'FUNCTION'
Description: Do the bootstrap of a data dir
FUNCTION
bootstrap() {
	# Am I running through bashbd program?
	is_bashbd
	RES=$?
	if [ "$RES" == "1" ]; then
		echo "This must be run through bd program. Exiting"
		exit 1
	fi

	if [ -d $1 ]; then
		eval $LOGGER FATAL "Folder already exists. Exiting"
	fi

	mkdir $1 && cd $1

	## Create temp folder
	mkdir temp

	##############################
	## Table: schemas
	# id   = integer
	# name = 200
	storage_create_file "TABLE" ${CTABLE_SCHEMAS}

	unset ROW
	declare -A ROW

	row_init int 200

	bootstrap_add_value 1 bashbd
	bootstrap_add_value 2 public

	row_append_simple ${CTABLE_SCHEMAS}

	eval $LOGGER LOG "Table schemas: OK"

	##############################
	## Table: sequences
	# id   		 	integer
	# schema_id  	integer
	# name		 	200
	# last_value	integer
	storage_create_file "TABLE" ${CTABLE_SEQUENCE}

	unset ROW
	declare -A ROW

	row_init int int 200 int

	bootstrap_add_value 1 1 sq_sequence 2
	bootstrap_add_value 2 1 sq_language 1
	bootstrap_add_value 3 1 sq_types 2
	bootstrap_add_value 4 1 sq_schemas 2
	bootstrap_add_value 5 1 sq_table 8
	bootstrap_add_value 6 1 sq_functions 8
	bootstrap_add_value 7 1 sq_index 0
	bootstrap_add_value 8 1 sq_attrs 26

	# [ storage ]
	row_append_simple ${CTABLE_SEQUENCE}

	eval $LOGGER LOG "Table sequences: OK"

	############################
	## Table: language
	##  id	    int
	##  name    200
	##  handler 200
	storage_create_file "TABLE" ${CTABLE_LANG}

	unset ROW
	declare -A ROW

	row_init int 200 200

	bootstrap_add_value 1 builtin ${MGC_NULL}

	row_append_simple ${CTABLE_LANG}

	eval $LOGGER LOG "Table language OK"

	############################
	## Table: Types
	## id		int
	## name		200
	## fnc_out	200
	## size		int
	storage_create_file "TABLE" ${CTABLE_TYPES}

	unset ROW
	declare -A ROW

	row_init int 200 200 int

	bootstrap_add_value 1 int fnc_out 4
	bootstrap_add_value 2 char ${MGC_NULL} ${MGC_NULL}

	row_append_simple ${CTABLE_TYPES}

	eval $LOGGER LOG "Table types OK"

	#############################
	## Table: tables
	## id			int
	## name			200
	## schema_id	int
	storage_create_file "TABLE" ${CTABLE_TABLES}

	unset ROW
	declare -A ROW

	row_init int 200 int

	bootstrap_add_value $CTABLE_SCHEMAS schemas 1
	bootstrap_add_value $CTABLE_TABLES tables 1
	bootstrap_add_value $CTABLE_ATTRS attrs 1
	bootstrap_add_value $CTABLE_TYPES types 1
	bootstrap_add_value $CTABLE_FUNCTIONS functions 1
	bootstrap_add_value $CTABLE_INDEX index 1
	bootstrap_add_value $CTABLE_LANG language 1
	bootstrap_add_value $CTABLE_SEQUENCE sequences 1
	bootstrap_add_value 9 teste 1

	row_append_simple ${CTABLE_TABLES}

	eval $LOGGER LOG "Table tables OK"

	###########################
	## Table: functions
	## id		int
	## name		200
	## handler	200
	## lang_id	int
	storage_create_file "TABLE" ${CTABLE_FUNCTIONS}

	unset ROW
	declare -A ROW

	row_init int 200 200 int

	bootstrap_add_value 1 sum bashbd.sum 1
	bootstrap_add_value 2 coalesce bashbd.coalesce 1
	bootstrap_add_value 3 max bashbd.max 1
	bootstrap_add_value 4 min bashbd.min 1
	bootstrap_add_value 5 count bashbd.count 1
	bootstrap_add_value 6 avg bashbd.avg 1
	bootstrap_add_value 7 nextval bashbd.nextval 1
	bootstrap_add_value 8 currval bashbd.currval 1

	row_append_simple ${CTABLE_FUNCTIONS}

	eval $LOGGER LOG "Table functions OK"

	##########################
	## Table index
	## id 		int
	## table_id	int
	## fields	200
	storage_create_file "TABLE" ${CTABLE_INDEX}

	eval $LOGGER LOG "Table index OK"

	##########################
	## Table Attrs
	## id		int
	## table_id	int
	## name		200
	## types_id	int
	## size		int
	## default	200
	storage_create_file "TABLE" ${CTABLE_ATTRS}

	# Types
	# 1 - Integer
	# 2 - Char
	unset ROW
	declare -A ROW

	# id - table_id - name - types_id - size - default
	row_init int int 200 int int 200

	# Relation schemas
	bootstrap_add_value 1 ${CTABLE_SCHEMAS} id 1 -1 "sequence:4"
	bootstrap_add_value 2 ${CTABLE_SCHEMAS} name 2 200 ${MGC_NULL}

	# Relation Languages
	bootstrap_add_value 3 ${CTABLE_LANG} id 1 -1 "sequence:2"
	bootstrap_add_value 4 ${CTABLE_LANG} name 2 200 ${MGC_NULL}
	bootstrap_add_value 5 ${CTABLE_LANG} handler 2 200 ${MGC_NULL}

	# Relation Types
	bootstrap_add_value 6 ${CTABLE_TYPES} id 1 -1 "sequence:3"
	bootstrap_add_value 7 ${CTABLE_TYPES} name 2 200 ${MGC_NULL}
	bootstrap_add_value 8 ${CTABLE_TYPES} fnc_out 2 200 ${MGC_NULL}
	bootstrap_add_value 9 ${CTABLE_TYPES} size 1 -1 ${MGC_NULL}

	# Relation Table
	bootstrap_add_value 10 ${CTABLE_TABLES} id 1 -1 "sequence:5"
	bootstrap_add_value 11 ${CTABLE_TABLES} name 2 200 ""
	bootstrap_add_value 12 ${CTABLE_TABLES} schema_id 1 -1 ""

	# Relation Attrs
	bootstrap_add_value 13 ${CTABLE_ATTRS} id 1 -1 "sequence:8"
	bootstrap_add_value 14 ${CTABLE_ATTRS} table_id 1 -1 ""
	bootstrap_add_value 15 ${CTABLE_ATTRS} name 2 200 ""
	bootstrap_add_value 16 ${CTABLE_ATTRS} types_id 1 -1 ""
	bootstrap_add_value 17 ${CTABLE_ATTRS} size 1 -1 ""
	bootstrap_add_value 30 ${CTABLE_ATTRS} default 2 200 ${MGC_NULL}

	# Relation functions
	bootstrap_add_value 18 ${CTABLE_FUNCTIONS} id 1 -1 "sequence:6"
	bootstrap_add_value 19 ${CTABLE_FUNCTIONS} name 2 200 ""

	# Relation index
	bootstrap_add_value 20 ${CTABLE_INDEX} id 1 -1 "sequence:7"
	bootstrap_add_value 21 ${CTABLE_INDEX} name 2 200 ""
	bootstrap_add_value 22 ${CTABLE_INDEX} fields 2 200 ""

	# Relation sequence
	bootstrap_add_value 23 ${CTABLE_SEQUENCE} id 1 -1 "sequence:1"
	bootstrap_add_value 24 ${CTABLE_SEQUENCE} schema_id 1 -1 ""
	bootstrap_add_value 25 ${CTABLE_SEQUENCE} name 2 200 ""
	bootstrap_add_value 26 ${CTABLE_SEQUENCE} last_value 1 -1 ""

	# Relation teste
	bootstrap_add_value 27 9 id 1 -1
	bootstrap_add_value 28 9 uuid 2 36
	bootstrap_add_value 29 9 val 1 -1 

	# [ storage ]
	row_append_simple ${CTABLE_ATTRS}

	eval $LOGGER LOG "Table attrs OK"

	######
	## Table testes
	## id 		int
	## uuid		36
	## number	int
	storage_create_file "TABLE" 9
	unset ROW
	declare -A ROW
	row_init int 36 int

	local uis=36

	for i in {1..50}; do
		local i=$RANDOM
		if [ ${uis} == 36 ]; then
			uis=1
			local uuid=$(uuidgen)
		fi
		let uis++

		bootstrap_add_value $i ${uuid:0:$uis} $i
	done

	row_append_simple 9

	eval $LOGGER LOG "Table teste OK"

	bootstrap_stamp_dir
}
