#!/bin/bash

: <<'COMMENT'
Description of ROW Vector:
	ROWS      => Total row number in the vector
	FIELDS    => Total fields number in the row
	FIELDS_n  => The type of the attributes
    n,VALUE_y => The number of the row, and the values of its attibutes
COMMENT

# Return a string of the magic code
# $1 - OBJECT
# $2 - RETURN
get_magic_code() {
	local _RET=$1

	case "$2" in
		TABLE)
			eval $_RET="$MGC_TABLE" ;;
		INDEX)
			eval $_RET="$MGC_INDEX" ;;
		SEQUENCE)
			eval $_RET="$MGC_SEQUENCE" ;;
		*)
			$PRG_ECHO "Unknown Magic Code $2"
			;;
	esac
}

# $1 - Retorno
# $2 - MGC
get_magic_code_name() {
	local _RET=$1
	case $2 in
		$MGC_TABLE)	   eval $_RET="TABLE" ;;
		$MGC_INDEX)    eval $_RET="INDEX" ;;
		$MGC_SEQUENCE) eval $_RET="SEQUENCE" ;;
	esac
}

# Check if file exists
#  Return 0: File exists
#  Return 1: File NOT exists
# $1 - Filename
storage_file_exists() {
	if [ -f $1 ]; then
		return 0
	else
		return 1
	fi
}

: <<'FUNCTION'
Description: Function to create file
Parameters:
 $1 = OBJECT
 $2 = NAME
FUNCTION
storage_create_file() {
	local _OBJ=$1
	local _FILE=$2

	if [ -z $2 ]; then
		LOGGER_MSG="Parametro 2 não informado"
		eval $LOGGER ERROR
		return -1
	fi

	storage_file_exists $_FILE
	RES=$?
	if [ "$RES" -eq "0" ]; then
		LOGGER_MSG="Cannot create file. File ($_FILE) already exists"
		eval $LOGGER ERROR
		return -1
	fi

	# [ storage ]
	get_magic_code MGC $_OBJ

	#echo "Found magic code: $MGC `echo $MGC | hexdump -C`"

	echo -en "$MGC" > $_FILE
	echo -en "$MGC_SEP" >> $_FILE

	LOGGER_MSG="File ($_FILE) successfully created"
	eval $LOGGER DEBUG3

	return 0
}

# $1 - Hex Magic Code
# $2 - File
storage_append_magic() {
	$PRG_ECHO -en "\x$1" >> $2
}

: <<'FUNCTION'
Description: Convert a ASCII value to his hex representation
Parameters:
 $1 - ASCII value with 2 bytes
FUNCTION
storage_print_magic() {
	# Check length 2 bytes
	if [ ! ${#1} == 2 ]; then
		eval $LOGGER ERROR "Value must have 2 bytes"
		return 1
	fi

	$PRG_ECHO -en "\x$1"
}

: <<'FUNCTION'
Description: Check if object is of the desired type
Parameters:
 $1 - Kind of object (TABLE, INDEX...)
 $2 - File
FUNCTION
storage_check_mgc() {
	TMP=`$PRG_DD if=$2 ibs=1 count=1 conv=notrunc status=none | ${PRG_XXD} -p`
	VALUE=${TMP^^}

	get_magic_code MGC $1

	if [ ! "$VALUE" == "$MGC" ]; then
		$PRG_ECHO "Invalid kind of object"
	fi
}

: <<'FUNCTION'
Description: Simple function to insert into table
# The values must be present in the $ROW variable
# $1 - Table to append data
FUNCTION
row_append_simple() {
	local _TABLE=$1
	local CROW=""	# Used to hold all the records
	local IROW=""	# Used in the inner record
	local METADATA=""
	local rec_size=0

	# Loop in the ROW variable, that can contain one or more rows
	for i in `$PRG_SEQ 1 ${ROW[ROWS]}`; do
		# In this first level of the loop we are in the Record level
		IROW=""

		# Now, loop the fields in this row
		for f in `$PRG_SEQ 1 ${ROW[FIELDS]}`; do

			# Get the value of the field
			I_VALUE="${ROW[$i,VALUE_$f]}"

			# The size of the field
			SIZE="${ROW[FIELDS_$f]}"

			#echo "|$I_VALUE| `echo -n $I_VALUE | hexdump -C`"

			if [ "${I_VALUE}" == "${MGC_NULL}" ]; then
				# echo "|$I_VALUE| `echo -n $I_VALUE | hexdump -C`"
				# Se for nulo não faz nada
				:
			else
				# Check if the data need some special treatment
				case ${SIZE} in
					int)
						# Just check the size -1 and convert to null
						if [ "${I_VALUE}" -eq -1 ]; then
							IROW="${IROW}${MGC_NULL}"
						else
							int_to_hex rec_size 8 ${I_VALUE}
							IROW="${IROW}${rec_size}"
						fi
						;;
					*)
						#IROW=`$PRG_PRINTF "%s%${SIZE}s" "${IROW}" "${I_VALUE}"`
						IROW="${IROW}${I_VALUE}"
						;;
				esac
			fi

			# Put a Field Separator
			if [ ! "$f" == "${ROW[FIELDS]}" ]; then
				IROW="${IROW}${MGC_FLD}"
			fi
		done

		int_to_hex rec_size 4 ${#IROW}

		# This is the end of the ROW, lets put our metadata
		METADATA="1${MGC_FLD}${rec_size}${MGC_HEADER}"

		# The row data finished, put a Record Separator
		#IROW="${METADATA}${IROW}${MGC_SEP}"

		CROW="${CROW}${METADATA}${IROW}${MGC_SEP}"
	done

	# Just echo the value to the table
	$PRG_ECHO -n "${CROW}" >> $_TABLE

	# Change to use here-doc that is not affected by the ARG_MAX "limitation"
	#$PRG_CAT -n <<<"${CROW}" >> $_TABLE

	# Data is inserted by now
}

: <<'FUNCTION'
Description: Initialize the ROW variable
 $n - Type or size of the attribute
 Example:
  row_init int 200
    $1 - type int
    $2 - size 200
FUNCTION
row_init() {
	VALUES=($@)

	# METADATA
	# #1 - Row is alive? 0 No 1 Yes
	ROW[META]="0"
	ROW[FIELDS]="${#}"
	ROW[ROWS]=0

	for i in `$PRG_SEQ 1 ${#}`; do
		ROW[FIELDS_$i]="${VALUES[i-1]}"
	done
}

row_add_value() {
	VALUES=("$@")
	fn=0
	let ROW[ROWS]=${ROW[ROWS]}+1
	rown=${ROW[ROWS]}
	for pos in `$PRG_SEQ 1 ${#VALUES[@]}`; do
		# one more field/attribute
		let fn=$fn+1

		ROW[$rown,VALUE_$fn]="${VALUES[pos-1]}"
	done
}

init_file() {
	# Check if the variable name does not conflict with the name of our
	#  inner variable. If the name is the same we will get circular reference error
	# IFD = Inner File Data
	if [ "$1" == "IFD" ]; then
		eval $LOGGER ERROR "Variable name cannot be IFD"
		return 1
	fi
	declare -n IFD=$1

	# Position the cursor at the beginning
	IFD[pos]=1
	# Read 32Kb for now
	IFD[data]=$(${PRG_HEAD} -c 32K ${IFD[file]})
	IFD[record_num]=0
	IFD[record]=""
	IFD[type]="U"	# Unknown

	local ts=$(${PRG_STAT} -c %s ${IFD[file]})

	# Save the type of this relation
	get_magic_code_name OUT ${IFD[data]:0:1}
	IFD[type]="$OUT"
}

# Returns
#  0 = OK - Record found
#  1 = No more data
#  2 = Internal error
next_record() {
	declare -n STG_DATA="$1"
	declare -n TFLD="$2"

	# Check if the record is alive and get the values
	# 1 -- Record init
	# 2 -- Live or not?
	# 3 -- Field Separator
	# 4..7 -- size
	# 8 -- Data Init

	# Actual pos
	pos=${STG_DATA[pos]}

	# Out actual position must be an E1 hex
	tmp=${STG_DATA[data]:$pos:1}

	if [ "$tmp" == "" ]; then
		eval $LOGGER DEBUG "Next variable is empty. There is no more data"
		return 1
	fi

	if [ ! "$tmp" == "$MGC_SEP" ]; then
		eval $LOGGER ERROR "Magic code not present. Maybe corrupt data or wrong position"
		unset TFLD
		return 2
	fi

	live="${STG_DATA[data]:(($pos+$SH_LIVE)):1}"
	hsz="${STG_DATA[data]:(($pos+$SH_SIZE)):4}"
	sz=$((0x$hsz))

	fields="${STG_DATA[data]:(($pos+$SH)):$sz}"

	if [ "$fields" == "" ]; then
		eval $LOGGER DEBUG "Next variable is empty. There is no more data"
		return 1
	fi

	let STG_DATA[record_num]++

	# Break fields
	mapfile -t -O 1 -d${MGC_FLD} TFLD < <(echo -n "$fields")
	RES=$?
	if [ ! "$RES" == 0 ]; then
		eval $LOGGER ERROR "Error in mapfile to get fields"
		return 2
	fi

	# Andar o pos
	# sz - size of the record
	# SZ_SIZE - size of the header
	let walk=$pos+$sz+$SH
	STG_DATA[pos]=$walk

	return 0
}
