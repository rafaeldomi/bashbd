#!/bin/bash

##############
# Program to dump file contents
##############

FILE=$1
if [ ! -f $FILE ]; then
	echo "File '$FILE' not found. Exiting"
	exit 1
fi

. src/const
. src/macros
. src/storage/storage
. src/printer
. src/functions
. src/log
. src/var

# Initialize this variable with a default value to not break LOGGER calls
PRG_PRINTF="printf"

# [ functions ]
find_binaries

# $1 - Field N
# $2 - Value
# check_size() {
# 	atual=${ATABLE[S_$1]}
# 	input=${#2}

# 	if [ -z $atual ]; then
# 		atual=0
# 	fi

# 	if [ "$input" -gt "$atual" ]; then
# 		ATABLE[S_$1]=$input
# 	fi
# }

echo "Dumping: $FILE"

TMP=$($PRG_DD if=$FILE ibs=1 count=1 conv=notrunc status=none)
VALUE=${TMP^^}

get_magic_code_name OUT $VALUE

echo "  Type: $VALUE ($OUT)"

# Using the 1E hex code we want to split one row per array
#  1E = Record delimiter

# -t = Remove delimitador no final de cada linha (sem enter)
# -s = Descarta a primeira position (File Type)
# -O = Inicia atribuição no index x
# -d = Delimitador de record
mapfile -t -s 1 -O 1 -d ${MGC_SEP} DATA < $FILE

TOTAL_RECORDS=${#DATA[@]}

echo "Total Rows: $TOTAL_RECORDS"

rown=0
TABDATA=""
PRINTER_HEADER="N Pos Size Alive"
position=1
position_f=1

declare -A PRINTER

# Loop in the records
for (( rown = 1 ; rown <= ${TOTAL_RECORDS}; rown++)); do
	# First we need to break by the header, just break by the Size of the Header
	i_row=${DATA[rown]}

	HEADER[1]="${i_row:0:${SH}}"
	HEADER[2]="${i_row:7}"

	# echo "${HEADER[1]}"

	## Break the record header
	mapfile -t -O 1 -d ${MGC_FLD} HFLD <<<$(echo -n "${HEADER[1]}")

	# HEADER[0] == header
	# HEADER[1] == Data

	# 1D is Field Delimiter
	# Break the row
	mapfile -t -O 1 -d ${MGC_FLD} FLD <<<$(echo "${HEADER[2]}")

	# rown = total records
	# rowf = total fields / columns

	# Loop in the fields on the record
	rowf=0
	declare -A RECORD_DATA_HOLDER

	sz_hex=${HFLD[2]:0:4}
	hex_to_int SZ $sz_hex

	let position_f=$position+$SH

	# Just in the Row #1 (That must be the header of the object)
	if [ $rown -eq 1 ]; then
		NoC="${#FLD[@]}"
		for (( n=1; n <= $NoC; n++)); do
			PRINTER_HEADER="$PRINTER_HEADER Fld${n}"
		done

		printer_init PRINTER "$PRINTER_HEADER"
	fi

	printer_new_row PRINTER
	printer_row_field PRINTER "$rown"
	printer_row_field PRINTER "$position ($position_f)"
	printer_row_field PRINTER "$sz_hex"
	printer_row_field PRINTER "${HFLD[1]}"

	# printer_row_field
	prf=3

	# Loop in the fields
	for f in "${FLD[@]}"; do
		# Like a trim
		inf="$(echo -n $f)"

		let rowf++

		VAL="${inf}"
		# Check if value is null
		if [[ ${#VAL} == 1 && "${VAL}" == "${MGC_NULL}" ]]; then
			VAL="(null)"
		fi

		printer_row_field PRINTER "$VAL"
	done

	let position=$position+${#i_row}
done

# Print Table [ printer ]
printer PRINTER
