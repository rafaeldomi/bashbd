#!/bin/bash

##############
# Program to dump file contents
##############

FILE=$1
if [ ! -f $FILE ]; then
	echo "File '$FILE' not found. Exiting"
	exit 1
fi

. const
. storage
. printer
. functions
. log
. var

# Initialize this variable with a default value to not break
#  LOGGER calls
PRG_PRINTF="printf"

# [ functions ]
find_binaries

declare -A ATABLE
declare -A TAB_PRINT

# $1 - Field N
# $2 - Value
check_size() {
	atual=${ATABLE[S_$1]}
	input=${#2}

	if [ -z $atual ]; then
		atual=0
	fi

	if [ "$input" -gt "$atual" ]; then
		ATABLE[S_$1]=$input
	fi
}

echo "Dumping: $FILE"

TMP=$($PRG_DD if=$FILE ibs=1 count=1 conv=notrunc status=none)
VALUE=${TMP^^}

get_magic_code_name OUT $VALUE

echo "  Type: $VALUE ($OUT)"

# Using the 1E hex code we want to split one row per array
#  1E = Record delimiter

# -t = Remove delimitador no final de cada linha (sem enter)
# -s = Descarta a primeira position (File Type)
# -O = Inicia atribuição no index x
# -d = Delimitador de record
mapfile -t -s 1 -O 1 -d ${MGC_SEP} DATA < $FILE

echo "Total Rows: ${#DATA[@]}"
ATABLE[ROWS]=${#DATA[@]}

rown=0
TABDATA=""
TABFLD="| N${MGC_FLD}| Pos${MGC_FLD}| Size${MGC_FLD}| Alive"
position=1
position_f=1

# Loop in the records
for i_row in "${DATA[@]}"; do
	# First we need to break by the header, just break by the Size of the Header
	HEADER[1]="${i_row:0:${SH}}"
	HEADER[2]="${i_row:7}"

	echo "${HEADER[1]}"

	## Break the record header
	mapfile -t -O 1 -d ${MGC_FLD} HFLD <<<$(echo -n "${HEADER[1]}")

	# HEADER[0] == header
	# HEADER[1] == Data

	# 1D is Field Delimiter
	# Break the row
	mapfile -t -O 1 -d ${MGC_FLD} FLD <<<$(echo "${HEADER[2]}")

	# rown = total records
	# rowf = total fields / columns

	let rown++
	# Loop in the fields on the record
	rowf=0

	sz_hex=${HFLD[2]:0:4}
	hex_to_int SZ $sz_hex

	let position_f=$position+$SH
	# N | Pos | Size | Alive
	TABDATA="| $rown${MGC_FLD}| ${position} ($position_f)${MGC_FLD}| $sz_hex ($SZ)${MGC_FLD}| ${HFLD[1]}"
	let position=$position+${#i_row}

	# Loop in the fields
	for f in "${FLD[@]}"; do
		# Like a trim
		inf="$(echo -n $f)"

		let rowf++

		VAL="${inf}"
		# Check if value is null
		if [[ ${#VAL} == 1 && "${VAL}" == "${MGC_NULL}" ]]; then
			VAL="(null)"
		fi

		TABDATA="${TABDATA}${MGC_FLD}| ${VAL}"

		# Preenche o header da tabela de saida apenas no primeiro ow
		if [ "${rown}" -eq 1 ]; then
			TABFLD="$TABFLD${MGC_FLD}| Fld${rowf}"
		fi
		
		ATABLE[${rown}_${rowf}]="$VAL"
	done

	TAB_PRINT[${rown}]="$TABDATA ${MGC_FLD}|"

	# Just in the Row #1 (That must be the header of the object)
	if [ "$rown" == 1 ]; then
		# TF for Total Fields
		ATABLE[TF]=$rowf
	fi
done

echo "Total fields: ${ATABLE[TF]}"
echo "Total Rows: ${ATABLE[ROWS]}"
echo ""

TAB_PRINT[header]="${TABFLD} ${MGC_FLD}|"
TAB_PRINT[rows]="${ATABLE[ROWS]}"
TAB_PRINT[fields]="${ATABLE[TF]}"

let TAB_PRINT[fields]=${TAB_PRINT[fields]}+4

echo "iniciando printable"

# Print Table
#time printTablev2 TAB_PRINT
printer TAB_PRINT
